{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nVOH-CBO (Voices of Hope Community-Based Organisation) is a full-stack web application for a Kenyan non-profit organization focused on empowering women and girls through education, advocacy, and community programs. The platform features a modern, responsive design with comprehensive content management capabilities, donation processing, and administrative controls.\n\nThe application supports the organization's mission to amplify voices of women and girls by providing digital platforms for program showcase, team management, blog content, event coordination, and secure donation processing through Stripe integration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **UI Components**: Radix UI primitives through shadcn/ui for accessible, customizable components\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Passport.js with local strategy and session-based authentication\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **API Design**: RESTful API endpoints with proper error handling and middleware\n\n## Database Design\n- **ORM**: Drizzle with PostgreSQL dialect for schema management and migrations\n- **Schema Structure**: Modular design with separate tables for users, team members, blog posts, programs, events, donations, merchandise, contact messages, and gallery images\n- **Data Validation**: Zod schemas for runtime validation and type safety\n- **Relationships**: Proper foreign key relationships with cascading deletes where appropriate\n\n## Authentication & Authorization\n- **Strategy**: Session-based authentication using Passport.js local strategy\n- **Password Security**: Scrypt hashing with salt for secure password storage\n- **Session Management**: Server-side sessions stored in PostgreSQL with configurable expiration\n- **Protected Routes**: Middleware-based route protection for admin functionality\n- **Role-based Access**: Admin role system for content management capabilities\n\n## Content Management System\n- **Team Management**: Full CRUD operations for team member profiles with image uploads\n- **Blog System**: Rich content management with draft/published states and slug generation\n- **Program Management**: Category-based program organization with active/inactive states\n- **Event Coordination**: Calendar-based event management with RSVP capabilities\n- **Gallery Management**: Image organization with Cloudinary integration for optimized delivery\n\n## Payment Processing\n- **Payment Gateway**: Stripe integration for secure donation processing\n- **Payment Types**: Support for one-time and recurring donations\n- **Checkout Flow**: Embedded Stripe Elements for seamless payment experience\n- **Transaction Tracking**: Database logging of all donation transactions\n- **Security**: PCI-compliant payment processing through Stripe\n\n# External Dependencies\n\n## Database Services\n- **PostgreSQL**: Primary database for all application data\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n\n## Payment Processing\n- **Stripe**: Payment gateway for donation processing and subscription management\n- **Stripe Elements**: Frontend payment form components for secure card collection\n\n## Media Management\n- **Cloudinary**: Cloud-based image and video management for team photos, gallery images, and blog thumbnails\n\n## Email Services\n- **Nodemailer**: Email sending for contact forms and volunteer applications\n- **SMTP Configuration**: Environment-based email service configuration\n\n## Development Tools\n- **Drizzle Kit**: Database migration and schema management\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundling for production builds\n- **Vite**: Development server with hot module replacement\n\n## UI Libraries\n- **Radix UI**: Headless UI primitives for accessibility and keyboard navigation\n- **Lucide React**: Consistent iconography throughout the application\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n\n## Authentication Dependencies\n- **Passport.js**: Authentication middleware for Express\n- **Express Session**: Session management with PostgreSQL storage\n- **Connect PG Simple**: PostgreSQL session store adapter\n\n## Validation & Forms\n- **Zod**: Schema validation for both frontend and backend\n- **React Hook Form**: Performance-optimized form library\n- **Hookform Resolvers**: Zod integration for form validation","size_bytes":4969},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        earth: {\n          50: \"var(--earth-50)\",\n          100: \"var(--earth-100)\",\n          200: \"var(--earth-200)\",\n          300: \"var(--earth-300)\",\n          400: \"var(--earth-400)\",\n          500: \"var(--earth-500)\",\n          600: \"var(--earth-600)\",\n          700: \"var(--earth-700)\",\n          800: \"var(--earth-800)\",\n          900: \"var(--earth-900)\",\n        },\n        success: \"var(--success)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        slideUp: {\n          from: { opacity: \"0\", transform: \"translateY(30px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.6s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3518},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"voh-cbo-secret-key-2024\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: \"username\" },\n      async (username, password, done) => {\n        try {\n          const user = await storage.getUserByUsername(username);\n          if (!user || !(await comparePasswords(password, user.password))) {\n            return done(null, false);\n          }\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, email, password } = req.body;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser({\n        username,\n        email,\n        password: await hashPassword(password),\n        role: \"admin\",\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          role: user.role,\n        });\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json({\n      id: req.user!.id,\n      username: req.user!.username,\n      email: req.user!.email,\n      role: req.user!.role,\n    });\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json({\n      id: req.user!.id,\n      username: req.user!.username,\n      email: req.user!.email,\n      role: req.user!.role,\n    });\n  });\n}\n","size_bytes":3824},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { \n  insertTeamMemberSchema, insertBlogPostSchema, insertProgramSchema,\n  insertEventSchema, insertDonationSchema, insertMerchandiseSchema,\n  insertContactMessageSchema, insertGalleryImageSchema\n} from \"@shared/schema\";\n\n// Initialize Stripe\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || \"\", {\n  apiVersion: \"2023-10-16\",\n});\n\n// Authentication middleware\nconst requireAuth = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Public routes\n\n  // Team members\n  app.get(\"/api/team\", async (req, res) => {\n    try {\n      const team = await storage.getAllTeamMembers();\n      const activeTeam = team.filter(member => member.isActive);\n      res.json(activeTeam);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch team members\" });\n    }\n  });\n\n  // Programs\n  app.get(\"/api/programs\", async (req, res) => {\n    try {\n      const programs = await storage.getActivePrograms();\n      res.json(programs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch programs\" });\n    }\n  });\n\n  // Events\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const events = await storage.getUpcomingEvents();\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  // Blog posts\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      const posts = await storage.getPublishedBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:slug\", async (req, res) => {\n    try {\n      const post = await storage.getBlogPostBySlug(req.params.slug);\n      if (!post || !post.isPublished) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  // Merchandise\n  app.get(\"/api/merchandise\", async (req, res) => {\n    try {\n      const items = await storage.getActiveMerchandise();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch merchandise\" });\n    }\n  });\n\n  // Gallery\n  app.get(\"/api/gallery\", async (req, res) => {\n    try {\n      const images = await storage.getPublicGalleryImages();\n      res.json(images);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch gallery images\" });\n    }\n  });\n\n  // Contact form submission\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      \n      // TODO: Send email notification using Nodemailer\n      \n      res.status(201).json({ message: \"Contact message sent successfully\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid contact form data\" });\n    }\n  });\n\n  // Donation endpoints\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const { amount, currency = \"USD\", donorName, donorEmail, message, isRecurring } = req.body;\n\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: currency.toLowerCase(),\n        metadata: {\n          donorName: donorName || \"\",\n          donorEmail: donorEmail || \"\",\n          isRecurring: isRecurring ? \"true\" : \"false\"\n        }\n      });\n\n      // Save donation record\n      await storage.createDonation({\n        amount: amount.toString(),\n        currency: currency.toUpperCase(),\n        donorName,\n        donorEmail,\n        message,\n        isRecurring: isRecurring || false,\n        stripePaymentIntentId: paymentIntent.id,\n        status: \"pending\"\n      });\n\n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  // Stripe webhook for payment confirmation\n  app.post(\"/api/webhooks/stripe\", async (req, res) => {\n    try {\n      const sig = req.headers['stripe-signature'];\n      const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n      if (!sig || !endpointSecret) {\n        return res.status(400).json({ message: \"Missing signature or webhook secret\" });\n      }\n\n      const event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);\n\n      if (event.type === 'payment_intent.succeeded') {\n        const paymentIntent = event.data.object;\n        \n        // Find and update donation record\n        const donations = await storage.getAllDonations();\n        const donation = donations.find(d => d.stripePaymentIntentId === paymentIntent.id);\n        \n        if (donation) {\n          await storage.updateDonationStatus(donation.id, \"completed\");\n        }\n      }\n\n      res.json({ received: true });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Webhook error: \" + error.message });\n    }\n  });\n\n  // Protected admin routes\n  app.use(\"/api/admin\", requireAuth);\n\n  // Admin: Team management\n  app.get(\"/api/admin/team\", async (req, res) => {\n    try {\n      const team = await storage.getAllTeamMembers();\n      res.json(team);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch team members\" });\n    }\n  });\n\n  app.post(\"/api/admin/team\", async (req, res) => {\n    try {\n      const validatedData = insertTeamMemberSchema.parse(req.body);\n      const member = await storage.createTeamMember(validatedData);\n      res.status(201).json(member);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid team member data\" });\n    }\n  });\n\n  app.put(\"/api/admin/team/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTeamMemberSchema.partial().parse(req.body);\n      const member = await storage.updateTeamMember(req.params.id, validatedData);\n      res.json(member);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update team member\" });\n    }\n  });\n\n  app.delete(\"/api/admin/team/:id\", async (req, res) => {\n    try {\n      await storage.deleteTeamMember(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete team member\" });\n    }\n  });\n\n  // Admin: Blog management\n  app.get(\"/api/admin/blog\", async (req, res) => {\n    try {\n      const posts = await storage.getAllBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.post(\"/api/admin/blog\", async (req, res) => {\n    try {\n      const validatedData = insertBlogPostSchema.parse({\n        ...req.body,\n        authorId: req.user!.id\n      });\n      const post = await storage.createBlogPost(validatedData);\n      res.status(201).json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid blog post data\" });\n    }\n  });\n\n  app.put(\"/api/admin/blog/:id\", async (req, res) => {\n    try {\n      const validatedData = insertBlogPostSchema.partial().parse(req.body);\n      const post = await storage.updateBlogPost(req.params.id, validatedData);\n      res.json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update blog post\" });\n    }\n  });\n\n  app.delete(\"/api/admin/blog/:id\", async (req, res) => {\n    try {\n      await storage.deleteBlogPost(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete blog post\" });\n    }\n  });\n\n  // Admin: Events management\n  app.get(\"/api/admin/events\", async (req, res) => {\n    try {\n      const events = await storage.getAllEvents();\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.post(\"/api/admin/events\", async (req, res) => {\n    try {\n      const validatedData = insertEventSchema.parse(req.body);\n      const event = await storage.createEvent(validatedData);\n      res.status(201).json(event);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid event data\" });\n    }\n  });\n\n  app.put(\"/api/admin/events/:id\", async (req, res) => {\n    try {\n      const validatedData = insertEventSchema.partial().parse(req.body);\n      const event = await storage.updateEvent(req.params.id, validatedData);\n      res.json(event);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  app.delete(\"/api/admin/events/:id\", async (req, res) => {\n    try {\n      await storage.deleteEvent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete event\" });\n    }\n  });\n\n  // Admin: Programs management\n  app.get(\"/api/admin/programs\", async (req, res) => {\n    try {\n      const programs = await storage.getAllPrograms();\n      res.json(programs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch programs\" });\n    }\n  });\n\n  app.post(\"/api/admin/programs\", async (req, res) => {\n    try {\n      const validatedData = insertProgramSchema.parse(req.body);\n      const program = await storage.createProgram(validatedData);\n      res.status(201).json(program);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid program data\" });\n    }\n  });\n\n  app.put(\"/api/admin/programs/:id\", async (req, res) => {\n    try {\n      const validatedData = insertProgramSchema.partial().parse(req.body);\n      const program = await storage.updateProgram(req.params.id, validatedData);\n      res.json(program);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update program\" });\n    }\n  });\n\n  app.delete(\"/api/admin/programs/:id\", async (req, res) => {\n    try {\n      await storage.deleteProgram(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete program\" });\n    }\n  });\n\n  // Admin: Contact messages\n  app.get(\"/api/admin/messages\", async (req, res) => {\n    try {\n      const messages = await storage.getAllContactMessages();\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contact messages\" });\n    }\n  });\n\n  app.put(\"/api/admin/messages/:id/read\", async (req, res) => {\n    try {\n      const message = await storage.markContactMessageAsRead(req.params.id);\n      res.json(message);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark message as read\" });\n    }\n  });\n\n  // Admin: Donations overview\n  app.get(\"/api/admin/donations\", async (req, res) => {\n    try {\n      const donations = await storage.getAllDonations();\n      res.json(donations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch donations\" });\n    }\n  });\n\n  // Admin: Gallery management\n  app.get(\"/api/admin/gallery\", async (req, res) => {\n    try {\n      const images = await storage.getAllGalleryImages();\n      res.json(images);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch gallery images\" });\n    }\n  });\n\n  app.post(\"/api/admin/gallery\", async (req, res) => {\n    try {\n      const validatedData = insertGalleryImageSchema.parse(req.body);\n      const image = await storage.createGalleryImage(validatedData);\n      res.status(201).json(image);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid gallery image data\" });\n    }\n  });\n\n  app.delete(\"/api/admin/gallery/:id\", async (req, res) => {\n    try {\n      await storage.deleteGalleryImage(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete gallery image\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12388},"server/storage.ts":{"content":"import { \n  users, teamMembers, blogPosts, programs, events, donations, \n  merchandise, contactMessages, galleryImages,\n  type User, type InsertUser, type TeamMember, type InsertTeamMember,\n  type BlogPost, type InsertBlogPost, type Program, type InsertProgram,\n  type Event, type InsertEvent, type Donation, type InsertDonation,\n  type Merchandise, type InsertMerchandise, type ContactMessage, \n  type InsertContactMessage, type GalleryImage, type InsertGalleryImage\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Team Members\n  getAllTeamMembers(): Promise<TeamMember[]>;\n  getTeamMember(id: string): Promise<TeamMember | undefined>;\n  createTeamMember(member: InsertTeamMember): Promise<TeamMember>;\n  updateTeamMember(id: string, member: Partial<InsertTeamMember>): Promise<TeamMember>;\n  deleteTeamMember(id: string): Promise<void>;\n\n  // Blog Posts\n  getAllBlogPosts(): Promise<BlogPost[]>;\n  getPublishedBlogPosts(): Promise<BlogPost[]>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost>;\n  deleteBlogPost(id: string): Promise<void>;\n\n  // Programs\n  getAllPrograms(): Promise<Program[]>;\n  getActivePrograms(): Promise<Program[]>;\n  getProgram(id: string): Promise<Program | undefined>;\n  createProgram(program: InsertProgram): Promise<Program>;\n  updateProgram(id: string, program: Partial<InsertProgram>): Promise<Program>;\n  deleteProgram(id: string): Promise<void>;\n\n  // Events\n  getAllEvents(): Promise<Event[]>;\n  getUpcomingEvents(): Promise<Event[]>;\n  getEvent(id: string): Promise<Event | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event>;\n  deleteEvent(id: string): Promise<void>;\n\n  // Donations\n  getAllDonations(): Promise<Donation[]>;\n  getDonation(id: string): Promise<Donation | undefined>;\n  createDonation(donation: InsertDonation): Promise<Donation>;\n  updateDonationStatus(id: string, status: string): Promise<Donation>;\n\n  // Merchandise\n  getAllMerchandise(): Promise<Merchandise[]>;\n  getActiveMerchandise(): Promise<Merchandise[]>;\n  getMerchandiseItem(id: string): Promise<Merchandise | undefined>;\n  createMerchandise(item: InsertMerchandise): Promise<Merchandise>;\n  updateMerchandise(id: string, item: Partial<InsertMerchandise>): Promise<Merchandise>;\n  deleteMerchandise(id: string): Promise<void>;\n\n  // Contact Messages\n  getAllContactMessages(): Promise<ContactMessage[]>;\n  getUnreadContactMessages(): Promise<ContactMessage[]>;\n  getContactMessage(id: string): Promise<ContactMessage | undefined>;\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  markContactMessageAsRead(id: string): Promise<ContactMessage>;\n\n  // Gallery Images\n  getAllGalleryImages(): Promise<GalleryImage[]>;\n  getPublicGalleryImages(): Promise<GalleryImage[]>;\n  getGalleryImage(id: string): Promise<GalleryImage | undefined>;\n  createGalleryImage(image: InsertGalleryImage): Promise<GalleryImage>;\n  updateGalleryImage(id: string, image: Partial<InsertGalleryImage>): Promise<GalleryImage>;\n  deleteGalleryImage(id: string): Promise<void>;\n\n  sessionStore: session.SessionStore;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Team Members\n  async getAllTeamMembers(): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers).orderBy(desc(teamMembers.createdAt));\n  }\n\n  async getTeamMember(id: string): Promise<TeamMember | undefined> {\n    const [member] = await db.select().from(teamMembers).where(eq(teamMembers.id, id));\n    return member || undefined;\n  }\n\n  async createTeamMember(member: InsertTeamMember): Promise<TeamMember> {\n    const [newMember] = await db.insert(teamMembers).values(member).returning();\n    return newMember;\n  }\n\n  async updateTeamMember(id: string, member: Partial<InsertTeamMember>): Promise<TeamMember> {\n    const [updatedMember] = await db.update(teamMembers)\n      .set(member)\n      .where(eq(teamMembers.id, id))\n      .returning();\n    return updatedMember;\n  }\n\n  async deleteTeamMember(id: string): Promise<void> {\n    await db.delete(teamMembers).where(eq(teamMembers.id, id));\n  }\n\n  // Blog Posts\n  async getAllBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts).orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getPublishedBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts)\n      .where(eq(blogPosts.isPublished, true))\n      .orderBy(desc(blogPosts.publishedAt));\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.id, id));\n    return post || undefined;\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.slug, slug));\n    return post || undefined;\n  }\n\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const [newPost] = await db.insert(blogPosts).values(post).returning();\n    return newPost;\n  }\n\n  async updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost> {\n    const [updatedPost] = await db.update(blogPosts)\n      .set({ ...post, updatedAt: new Date() })\n      .where(eq(blogPosts.id, id))\n      .returning();\n    return updatedPost;\n  }\n\n  async deleteBlogPost(id: string): Promise<void> {\n    await db.delete(blogPosts).where(eq(blogPosts.id, id));\n  }\n\n  // Programs\n  async getAllPrograms(): Promise<Program[]> {\n    return await db.select().from(programs).orderBy(desc(programs.createdAt));\n  }\n\n  async getActivePrograms(): Promise<Program[]> {\n    return await db.select().from(programs)\n      .where(eq(programs.isActive, true))\n      .orderBy(desc(programs.createdAt));\n  }\n\n  async getProgram(id: string): Promise<Program | undefined> {\n    const [program] = await db.select().from(programs).where(eq(programs.id, id));\n    return program || undefined;\n  }\n\n  async createProgram(program: InsertProgram): Promise<Program> {\n    const [newProgram] = await db.insert(programs).values(program).returning();\n    return newProgram;\n  }\n\n  async updateProgram(id: string, program: Partial<InsertProgram>): Promise<Program> {\n    const [updatedProgram] = await db.update(programs)\n      .set(program)\n      .where(eq(programs.id, id))\n      .returning();\n    return updatedProgram;\n  }\n\n  async deleteProgram(id: string): Promise<void> {\n    await db.delete(programs).where(eq(programs.id, id));\n  }\n\n  // Events\n  async getAllEvents(): Promise<Event[]> {\n    return await db.select().from(events).orderBy(desc(events.startDate));\n  }\n\n  async getUpcomingEvents(): Promise<Event[]> {\n    const now = new Date();\n    return await db.select().from(events)\n      .where(and(eq(events.isPublic, true)))\n      .orderBy(events.startDate);\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event || undefined;\n  }\n\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const [newEvent] = await db.insert(events).values(event).returning();\n    return newEvent;\n  }\n\n  async updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event> {\n    const [updatedEvent] = await db.update(events)\n      .set(event)\n      .where(eq(events.id, id))\n      .returning();\n    return updatedEvent;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  // Donations\n  async getAllDonations(): Promise<Donation[]> {\n    return await db.select().from(donations).orderBy(desc(donations.createdAt));\n  }\n\n  async getDonation(id: string): Promise<Donation | undefined> {\n    const [donation] = await db.select().from(donations).where(eq(donations.id, id));\n    return donation || undefined;\n  }\n\n  async createDonation(donation: InsertDonation): Promise<Donation> {\n    const [newDonation] = await db.insert(donations).values(donation).returning();\n    return newDonation;\n  }\n\n  async updateDonationStatus(id: string, status: string): Promise<Donation> {\n    const [updatedDonation] = await db.update(donations)\n      .set({ status })\n      .where(eq(donations.id, id))\n      .returning();\n    return updatedDonation;\n  }\n\n  // Merchandise\n  async getAllMerchandise(): Promise<Merchandise[]> {\n    return await db.select().from(merchandise).orderBy(desc(merchandise.createdAt));\n  }\n\n  async getActiveMerchandise(): Promise<Merchandise[]> {\n    return await db.select().from(merchandise)\n      .where(eq(merchandise.isActive, true))\n      .orderBy(desc(merchandise.createdAt));\n  }\n\n  async getMerchandiseItem(id: string): Promise<Merchandise | undefined> {\n    const [item] = await db.select().from(merchandise).where(eq(merchandise.id, id));\n    return item || undefined;\n  }\n\n  async createMerchandise(item: InsertMerchandise): Promise<Merchandise> {\n    const [newItem] = await db.insert(merchandise).values(item).returning();\n    return newItem;\n  }\n\n  async updateMerchandise(id: string, item: Partial<InsertMerchandise>): Promise<Merchandise> {\n    const [updatedItem] = await db.update(merchandise)\n      .set(item)\n      .where(eq(merchandise.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async deleteMerchandise(id: string): Promise<void> {\n    await db.delete(merchandise).where(eq(merchandise.id, id));\n  }\n\n  // Contact Messages\n  async getAllContactMessages(): Promise<ContactMessage[]> {\n    return await db.select().from(contactMessages).orderBy(desc(contactMessages.createdAt));\n  }\n\n  async getUnreadContactMessages(): Promise<ContactMessage[]> {\n    return await db.select().from(contactMessages)\n      .where(eq(contactMessages.isRead, false))\n      .orderBy(desc(contactMessages.createdAt));\n  }\n\n  async getContactMessage(id: string): Promise<ContactMessage | undefined> {\n    const [message] = await db.select().from(contactMessages).where(eq(contactMessages.id, id));\n    return message || undefined;\n  }\n\n  async createContactMessage(message: InsertContactMessage): Promise<ContactMessage> {\n    const [newMessage] = await db.insert(contactMessages).values(message).returning();\n    return newMessage;\n  }\n\n  async markContactMessageAsRead(id: string): Promise<ContactMessage> {\n    const [updatedMessage] = await db.update(contactMessages)\n      .set({ isRead: true })\n      .where(eq(contactMessages.id, id))\n      .returning();\n    return updatedMessage;\n  }\n\n  // Gallery Images\n  async getAllGalleryImages(): Promise<GalleryImage[]> {\n    return await db.select().from(galleryImages).orderBy(desc(galleryImages.createdAt));\n  }\n\n  async getPublicGalleryImages(): Promise<GalleryImage[]> {\n    return await db.select().from(galleryImages)\n      .where(eq(galleryImages.isPublic, true))\n      .orderBy(desc(galleryImages.createdAt));\n  }\n\n  async getGalleryImage(id: string): Promise<GalleryImage | undefined> {\n    const [image] = await db.select().from(galleryImages).where(eq(galleryImages.id, id));\n    return image || undefined;\n  }\n\n  async createGalleryImage(image: InsertGalleryImage): Promise<GalleryImage> {\n    const [newImage] = await db.insert(galleryImages).values(image).returning();\n    return newImage;\n  }\n\n  async updateGalleryImage(id: string, image: Partial<InsertGalleryImage>): Promise<GalleryImage> {\n    const [updatedImage] = await db.update(galleryImages)\n      .set(image)\n      .where(eq(galleryImages.id, id))\n      .returning();\n    return updatedImage;\n  }\n\n  async deleteGalleryImage(id: string): Promise<void> {\n    await db.delete(galleryImages).where(eq(galleryImages.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13142},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull(),\n  bio: text(\"bio\").notNull(),\n  imageUrl: text(\"image_url\"),\n  email: text(\"email\"),\n  linkedinUrl: text(\"linkedin_url\"),\n  twitterUrl: text(\"twitter_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  excerpt: text(\"excerpt\").notNull(),\n  content: text(\"content\").notNull(),\n  imageUrl: text(\"image_url\"),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  isPublished: boolean(\"is_published\").default(false),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const programs = pgTable(\"programs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\"),\n  category: text(\"category\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\"),\n  location: text(\"location\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  isPublic: boolean(\"is_public\").default(true),\n  maxAttendees: integer(\"max_attendees\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const donations = pgTable(\"donations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"USD\"),\n  donorName: text(\"donor_name\"),\n  donorEmail: text(\"donor_email\"),\n  message: text(\"message\"),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\"),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const merchandise = pgTable(\"merchandise\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: text(\"image_url\"),\n  category: text(\"category\").notNull(),\n  inventory: integer(\"inventory\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  inquiryType: text(\"inquiry_type\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const galleryImages = pgTable(\"gallery_images\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\").notNull(),\n  category: text(\"category\"),\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  blogPosts: many(blogPosts),\n}));\n\nexport const blogPostsRelations = relations(blogPosts, ({ one }) => ({\n  author: one(users, {\n    fields: [blogPosts.authorId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProgramSchema = createInsertSchema(programs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDonationSchema = createInsertSchema(donations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMerchandiseSchema = createInsertSchema(merchandise).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGalleryImageSchema = createInsertSchema(galleryImages).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type Program = typeof programs.$inferSelect;\nexport type InsertProgram = z.infer<typeof insertProgramSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Donation = typeof donations.$inferSelect;\nexport type InsertDonation = z.infer<typeof insertDonationSchema>;\nexport type Merchandise = typeof merchandise.$inferSelect;\nexport type InsertMerchandise = z.infer<typeof insertMerchandiseSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type GalleryImage = typeof galleryImages.$inferSelect;\nexport type InsertGalleryImage = z.infer<typeof insertGalleryImageSchema>;\n","size_bytes":6853},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport TeamManagement from \"@/pages/admin/team-management\";\nimport BlogManagement from \"@/pages/admin/blog-management\";\nimport EventsManagement from \"@/pages/admin/events-management\";\nimport DonationPage from \"@/pages/donation-page\";\nimport TeamPage from \"@/pages/about/team\";\nimport HistoryPage from \"@/pages/about/history\";\nimport EducationPage from \"@/pages/programs/education\";\nimport EventsPage from \"@/pages/community/events\";\nimport BlogPage from \"@/pages/community/blog\";\nimport ShopPage from \"@/pages/community/shop\";\nimport ContactPage from \"@/pages/contact\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/donate\" component={DonationPage} />\n      <Route path=\"/about/team\" component={TeamPage} />\n      <Route path=\"/about/history\" component={HistoryPage} />\n      <Route path=\"/programs/education\" component={EducationPage} />\n      <Route path=\"/community/events\" component={EventsPage} />\n      <Route path=\"/community/blog\" component={BlogPage} />\n      <Route path=\"/community/shop\" component={ShopPage} />\n      <Route path=\"/contact\" component={ContactPage} />\n      \n      {/* Protected admin routes */}\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} />\n      <ProtectedRoute path=\"/admin/team\" component={TeamManagement} />\n      <ProtectedRoute path=\"/admin/blog\" component={BlogManagement} />\n      <ProtectedRoute path=\"/admin/events\" component={EventsManagement} />\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2431},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(44, 25%, 98%);\n  --foreground: hsl(30, 10%, 15%);\n  --card: hsl(44, 25%, 97%);\n  --card-foreground: hsl(30, 10%, 15%);\n  --popover: hsl(44, 25%, 98%);\n  --popover-foreground: hsl(30, 10%, 15%);\n  --primary: hsl(20, 65%, 27%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(42, 75%, 45%);\n  --secondary-foreground: hsl(30, 10%, 15%);\n  --muted: hsl(44, 15%, 90%);\n  --muted-foreground: hsl(30, 10%, 45%);\n  --accent: hsl(14, 100%, 64%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(44, 20%, 88%);\n  --input: hsl(44, 20%, 95%);\n  --ring: hsl(20, 65%, 27%);\n  --chart-1: hsl(20, 65%, 27%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 75%, 45%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(14, 100%, 64%);\n  --sidebar: hsl(44, 25%, 97%);\n  --sidebar-foreground: hsl(30, 10%, 15%);\n  --sidebar-primary: hsl(20, 65%, 27%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(44, 20%, 90%);\n  --sidebar-accent-foreground: hsl(20, 65%, 27%);\n  --sidebar-border: hsl(44, 20%, 85%);\n  --sidebar-ring: hsl(20, 65%, 27%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Playfair Display', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 1.3rem;\n  \n  /* Earth tone color variables */\n  --earth-50: hsl(44, 50%, 98%);\n  --earth-100: hsl(42, 30%, 90%);\n  --earth-200: hsl(40, 25%, 82%);\n  --earth-300: hsl(38, 25%, 70%);\n  --earth-400: hsl(42, 75%, 45%);\n  --earth-500: hsl(20, 65%, 27%);\n  --earth-600: hsl(18, 65%, 22%);\n  --earth-700: hsl(16, 65%, 18%);\n  --earth-800: hsl(14, 65%, 15%);\n  --earth-900: hsl(12, 65%, 12%);\n  \n  --success: hsl(120, 61%, 34%);\n}\n\n.dark {\n  --background: hsl(30, 10%, 5%);\n  --foreground: hsl(44, 15%, 90%);\n  --card: hsl(30, 10%, 8%);\n  --card-foreground: hsl(44, 15%, 90%);\n  --popover: hsl(30, 10%, 5%);\n  --popover-foreground: hsl(44, 15%, 90%);\n  --primary: hsl(20, 65%, 35%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(42, 75%, 55%);\n  --secondary-foreground: hsl(30, 10%, 15%);\n  --muted: hsl(30, 10%, 12%);\n  --muted-foreground: hsl(44, 15%, 60%);\n  --accent: hsl(14, 100%, 70%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(30, 10%, 18%);\n  --input: hsl(30, 10%, 15%);\n  --ring: hsl(20, 65%, 35%);\n  --sidebar: hsl(30, 10%, 8%);\n  --sidebar-foreground: hsl(44, 15%, 90%);\n  --sidebar-primary: hsl(20, 65%, 35%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(30, 10%, 15%);\n  --sidebar-accent-foreground: hsl(20, 65%, 35%);\n  --sidebar-border: hsl(30, 10%, 20%);\n  --sidebar-ring: hsl(20, 65%, 35%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  .earth-50 {\n    background-color: var(--earth-50);\n  }\n  \n  .earth-100 {\n    background-color: var(--earth-100);\n  }\n  \n  .earth-200 {\n    background-color: var(--earth-200);\n  }\n  \n  .earth-300 {\n    background-color: var(--earth-300);\n  }\n  \n  .earth-400 {\n    background-color: var(--earth-400);\n  }\n  \n  .earth-500 {\n    background-color: var(--earth-500);\n  }\n  \n  .earth-600 {\n    background-color: var(--earth-600);\n  }\n  \n  .earth-700 {\n    background-color: var(--earth-700);\n  }\n  \n  .earth-800 {\n    background-color: var(--earth-800);\n  }\n  \n  .earth-900 {\n    background-color: var(--earth-900);\n  }\n  \n  .success {\n    background-color: var(--success);\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.6s ease-out;\n  }\n  \n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n  \n  @keyframes slideUp {\n    from { opacity: 0; transform: translateY(30px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n}\n","size_bytes":4129},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ContactSection.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, Phone, Mail, Clock, Send, Facebook, Twitter, Instagram, Linkedin, Youtube } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function ContactSection() {\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    inquiryType: \"\",\n    message: \"\",\n    newsletter: false,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const res = await apiRequest(\"POST\", \"/api/contact\", {\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        phone: data.phone,\n        inquiryType: data.inquiryType,\n        message: data.message,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"Thank you for reaching out. We'll get back to you soon.\",\n      });\n      setFormData({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        phone: \"\",\n        inquiryType: \"\",\n        message: \"\",\n        newsletter: false,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.firstName || !formData.lastName || !formData.email || !formData.inquiryType || !formData.message) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    contactMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-earth-100 to-earth-200\" id=\"contact\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-4\">Get In Touch</h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Ready to join our mission? Have questions? We'd love to hear from you.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n            <h3 className=\"font-serif text-2xl font-bold text-primary mb-6\">Send us a message</h3>\n            <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-contact\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name *</Label>\n                  <Input \n                    id=\"firstName\"\n                    type=\"text\" \n                    value={formData.firstName}\n                    onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                    required\n                    data-testid=\"input-first-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name *</Label>\n                  <Input \n                    id=\"lastName\"\n                    type=\"text\" \n                    value={formData.lastName}\n                    onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                    required\n                    data-testid=\"input-last-name\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input \n                  id=\"email\"\n                  type=\"email\" \n                  value={formData.email}\n                  onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone Number (Optional)</Label>\n                <Input \n                  id=\"phone\"\n                  type=\"tel\" \n                  value={formData.phone}\n                  onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                  data-testid=\"input-phone\"\n                />\n              </div>\n              \n              <div>\n                <Label>Inquiry Type *</Label>\n                <Select value={formData.inquiryType} onValueChange={(value) => handleInputChange(\"inquiryType\", value)}>\n                  <SelectTrigger data-testid=\"select-inquiry-type\">\n                    <SelectValue placeholder=\"Select Inquiry Type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"volunteer\">Volunteer Opportunity</SelectItem>\n                    <SelectItem value=\"partnership\">Partnership</SelectItem>\n                    <SelectItem value=\"donation\">Donation Inquiry</SelectItem>\n                    <SelectItem value=\"program\">Program Information</SelectItem>\n                    <SelectItem value=\"media\">Media/Press</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"message\">Your Message *</Label>\n                <Textarea \n                  id=\"message\"\n                  rows={5}\n                  value={formData.message}\n                  onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                  required\n                  data-testid=\"textarea-message\"\n                />\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"newsletter\"\n                  checked={formData.newsletter}\n                  onCheckedChange={(checked) => handleInputChange(\"newsletter\", !!checked)}\n                  data-testid=\"checkbox-newsletter\"\n                />\n                <Label htmlFor=\"newsletter\" className=\"text-sm text-gray-600\">\n                  Subscribe to our newsletter for updates and impact stories\n                </Label>\n              </div>\n\n              <Button \n                type=\"submit\" \n                disabled={contactMutation.isPending}\n                className=\"w-full bg-accent hover:bg-orange-600 text-white py-3 font-semibold\"\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"mr-2 h-4 w-4\" />\n                {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n              </Button>\n            </form>\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            {/* Contact Details */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n              <h3 className=\"font-serif text-2xl font-bold text-primary mb-6\">Contact Information</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-4\" data-testid=\"contact-address\">\n                  <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                    <MapPin className=\"text-white h-5 w-5\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-primary\">Address</p>\n                    <p className=\"text-gray-600\">Nairobi, Kenya<br/>P.O. Box 12345-00100</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-4\" data-testid=\"contact-phone\">\n                  <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Phone className=\"text-white h-5 w-5\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-primary\">Phone</p>\n                    <p className=\"text-gray-600\">+254 700 123 456</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-4\" data-testid=\"contact-email\">\n                  <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Mail className=\"text-white h-5 w-5\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-primary\">Email</p>\n                    <p className=\"text-gray-600\">info@voh-cbo.org</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-4\" data-testid=\"contact-hours\">\n                  <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Clock className=\"text-white h-5 w-5\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-primary\">Office Hours</p>\n                    <p className=\"text-gray-600\">Monday - Friday: 8:00 AM - 5:00 PM<br/>Saturday: 9:00 AM - 2:00 PM</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Social Media */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n              <h3 className=\"font-serif text-2xl font-bold text-primary mb-6\">Follow Us</h3>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"w-12 h-12 bg-blue-600 hover:bg-blue-700 rounded-full flex items-center justify-center text-white transition-colors duration-200\" data-testid=\"link-facebook\">\n                  <Facebook className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"w-12 h-12 bg-blue-400 hover:bg-blue-500 rounded-full flex items-center justify-center text-white transition-colors duration-200\" data-testid=\"link-twitter\">\n                  <Twitter className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"w-12 h-12 bg-pink-600 hover:bg-pink-700 rounded-full flex items-center justify-center text-white transition-colors duration-200\" data-testid=\"link-instagram\">\n                  <Instagram className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"w-12 h-12 bg-blue-700 hover:bg-blue-800 rounded-full flex items-center justify-center text-white transition-colors duration-200\" data-testid=\"link-linkedin\">\n                  <Linkedin className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"w-12 h-12 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center text-white transition-colors duration-200\" data-testid=\"link-youtube\">\n                  <Youtube className=\"h-5 w-5\" />\n                </a>\n              </div>\n              <p className=\"text-gray-600 mt-4 text-sm\">\n                Stay connected for updates, success stories, and ways to get involved in our mission.\n              </p>\n            </div>\n\n            {/* Map Placeholder */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n              <h3 className=\"font-serif text-2xl font-bold text-primary mb-6\">Visit Us</h3>\n              <div className=\"bg-gray-200 rounded-lg h-48 flex items-center justify-center\" data-testid=\"map-placeholder\">\n                <div className=\"text-center text-gray-500\">\n                  <MapPin className=\"h-12 w-12 mx-auto mb-2\" />\n                  <p>Interactive Map</p>\n                  <p className=\"text-sm\">Google Maps Integration</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":12341},"client/src/components/DonationSection.tsx":{"content":"import { useState } from \"react\";\nimport { Heart, Lock, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nconst donationAmounts = [25, 50, 100, 250];\n\nexport default function DonationSection() {\n  const [selectedAmount, setSelectedAmount] = useState<number | null>(null);\n  const [customAmount, setCustomAmount] = useState(\"\");\n  const [donationType, setDonationType] = useState(\"one-time\");\n  const [donorInfo, setDonorInfo] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [paymentMethod, setPaymentMethod] = useState(\"card\");\n  const { toast } = useToast();\n\n  const handleAmountSelect = (amount: number) => {\n    setSelectedAmount(amount);\n    setCustomAmount(\"\");\n  };\n\n  const handleCustomAmountChange = (value: string) => {\n    setCustomAmount(value);\n    setSelectedAmount(null);\n  };\n\n  const getCurrentAmount = () => {\n    return selectedAmount || (customAmount ? parseFloat(customAmount) : 0);\n  };\n\n  const handleDonation = () => {\n    const amount = getCurrentAmount();\n    if (!amount || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please select or enter a valid donation amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!donorInfo.firstName || !donorInfo.lastName || !donorInfo.email) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Redirect to dedicated donation page with parameters\n    const params = new URLSearchParams({\n      amount: amount.toString(),\n      type: donationType,\n      firstName: donorInfo.firstName,\n      lastName: donorInfo.lastName,\n      email: donorInfo.email,\n      method: paymentMethod,\n    });\n    \n    window.location.href = `/donate?${params.toString()}`;\n  };\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-earth-100 to-earth-200\" id=\"donate\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-4\">Make a Difference</h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Your contribution helps us continue empowering women and girls across Kenya. Every donation creates lasting impact.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 items-start\">\n          {/* Donation Form */}\n          <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n            <h3 className=\"font-serif text-2xl font-bold text-primary mb-6\">Support Our Mission</h3>\n            \n            {/* Donation Amount Selection */}\n            <div className=\"mb-6\">\n              <Label className=\"block text-sm font-medium text-gray-700 mb-3\">Select Donation Amount</Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mb-4\">\n                {donationAmounts.map((amount) => (\n                  <Button\n                    key={amount}\n                    type=\"button\"\n                    onClick={() => handleAmountSelect(amount)}\n                    className={`p-3 rounded-lg font-semibold transition-colors duration-200 ${\n                      selectedAmount === amount\n                        ? 'bg-accent text-white'\n                        : 'bg-earth-100 hover:bg-accent hover:text-white text-gray-700'\n                    }`}\n                    data-testid={`button-amount-${amount}`}\n                  >\n                    ${amount}\n                  </Button>\n                ))}\n              </div>\n              <Input \n                type=\"number\" \n                placeholder=\"Custom amount\" \n                value={customAmount}\n                onChange={(e) => handleCustomAmountChange(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-custom-amount\"\n              />\n            </div>\n\n            {/* Donation Type */}\n            <div className=\"mb-6\">\n              <Label className=\"block text-sm font-medium text-gray-700 mb-3\">Donation Type</Label>\n              <RadioGroup value={donationType} onValueChange={setDonationType}>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"one-time\" id=\"one-time\" data-testid=\"radio-one-time\" />\n                  <Label htmlFor=\"one-time\">One-time</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"monthly\" id=\"monthly\" data-testid=\"radio-monthly\" />\n                  <Label htmlFor=\"monthly\">Monthly</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {/* Donor Information */}\n            <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n              <Input \n                type=\"text\" \n                placeholder=\"First Name\" \n                value={donorInfo.firstName}\n                onChange={(e) => setDonorInfo({...donorInfo, firstName: e.target.value})}\n                required\n                data-testid=\"input-first-name\"\n              />\n              <Input \n                type=\"text\" \n                placeholder=\"Last Name\" \n                value={donorInfo.lastName}\n                onChange={(e) => setDonorInfo({...donorInfo, lastName: e.target.value})}\n                required\n                data-testid=\"input-last-name\"\n              />\n            </div>\n            <Input \n              type=\"email\" \n              placeholder=\"Email Address\" \n              value={donorInfo.email}\n              onChange={(e) => setDonorInfo({...donorInfo, email: e.target.value})}\n              className=\"mb-6\"\n              required\n              data-testid=\"input-email\"\n            />\n\n            {/* Payment Method */}\n            <div className=\"mb-6\">\n              <Label className=\"block text-sm font-medium text-gray-700 mb-3\">Payment Method</Label>\n              <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod}>\n                <div className=\"flex items-center space-x-3 p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-earth-50\">\n                  <RadioGroupItem value=\"card\" id=\"card\" data-testid=\"radio-card\" />\n                  <Label htmlFor=\"card\" className=\"flex items-center cursor-pointer\">\n                    Credit/Debit Card\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-3 p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-earth-50\">\n                  <RadioGroupItem value=\"paypal\" id=\"paypal\" data-testid=\"radio-paypal\" />\n                  <Label htmlFor=\"paypal\" className=\"flex items-center cursor-pointer\">\n                    PayPal\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-3 p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-earth-50\">\n                  <RadioGroupItem value=\"mpesa\" id=\"mpesa\" data-testid=\"radio-mpesa\" />\n                  <Label htmlFor=\"mpesa\" className=\"flex items-center cursor-pointer\">\n                    M-Pesa\n                  </Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {/* Submit Button */}\n            <Button \n              onClick={handleDonation}\n              className=\"w-full bg-accent hover:bg-orange-600 text-white py-4 text-lg font-semibold\"\n              data-testid=\"button-complete-donation\"\n            >\n              <Heart className=\"mr-2 h-5 w-5\" />\n              Complete Donation\n            </Button>\n\n            {/* Security Note */}\n            <p className=\"text-xs text-gray-500 mt-4 text-center\">\n              <Lock className=\"inline h-3 w-3 mr-1\" />\n              Your donation is secure and encrypted\n            </p>\n          </div>\n\n          {/* Impact Story */}\n          <div className=\"space-y-8\">\n            <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n              <h4 className=\"font-serif text-xl font-bold text-primary mb-4\">Your Impact</h4>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\" data-testid=\"impact-25\">\n                  <div className=\"w-8 h-8 bg-success rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Check className=\"text-white h-4 w-4\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">$25</p>\n                    <p className=\"text-sm text-gray-600\">Provides educational materials for one girl for a month</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\" data-testid=\"impact-50\">\n                  <div className=\"w-8 h-8 bg-success rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Check className=\"text-white h-4 w-4\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">$50</p>\n                    <p className=\"text-sm text-gray-600\">Funds leadership training workshop for 5 women</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\" data-testid=\"impact-100\">\n                  <div className=\"w-8 h-8 bg-success rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Check className=\"text-white h-4 w-4\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">$100</p>\n                    <p className=\"text-sm text-gray-600\">Supports one scholarship recipient for three months</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Success Story */}\n            <div className=\"bg-gradient-to-br from-secondary/10 to-accent/10 rounded-2xl p-8\">\n              <h4 className=\"font-serif text-xl font-bold text-primary mb-4\">Success Story</h4>\n              <p className=\"text-gray-600 mb-4 italic\">\n                \"Thanks to VOH-CBO's scholarship program, I was able to complete my secondary education and am now pursuing a degree in computer science. I want to use technology to solve problems in my community.\"\n              </p>\n              <div className=\"flex items-center space-x-3\" data-testid=\"testimonial\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold\">AM</span>\n                </div>\n                <div>\n                  <p className=\"font-semibold\">Amina M.</p>\n                  <p className=\"text-sm text-gray-500\">Scholarship Recipient</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":11163},"client/src/components/Footer.tsx":{"content":"import { Heart, Facebook, Twitter, Instagram, Linkedin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-800 text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Organization Info */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n                <Heart className=\"text-white h-6 w-6\" />\n              </div>\n              <div>\n                <h1 className=\"font-serif text-xl font-bold text-white\">VOH-CBO</h1>\n                <p className=\"text-xs text-gray-300\">Voices of Hope</p>\n              </div>\n            </div>\n            <p className=\"text-gray-300 mb-6 max-w-md\">\n              Amplifying the voices of girls and women through education, advocacy, leadership, and community inclusion across Kenya. Together, we're building a future where every woman can thrive.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 hover:bg-primary rounded-full flex items-center justify-center transition-colors duration-200\" data-testid=\"footer-facebook\">\n                <Facebook className=\"h-4 w-4\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 hover:bg-primary rounded-full flex items-center justify-center transition-colors duration-200\" data-testid=\"footer-twitter\">\n                <Twitter className=\"h-4 w-4\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 hover:bg-primary rounded-full flex items-center justify-center transition-colors duration-200\" data-testid=\"footer-instagram\">\n                <Instagram className=\"h-4 w-4\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 hover:bg-primary rounded-full flex items-center justify-center transition-colors duration-200\" data-testid=\"footer-linkedin\">\n                <Linkedin className=\"h-4 w-4\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"font-serif text-lg font-bold mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2\">\n              <li><Link href=\"/about\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-about\">About Us</Link></li>\n              <li><Link href=\"/programs\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-programs\">Our Programs</Link></li>\n              <li><Link href=\"/about/team\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-team\">Our Team</Link></li>\n              <li><Link href=\"/#impact\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-impact\">Impact</Link></li>\n              <li><Link href=\"/community/events\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-events\">Events</Link></li>\n              <li><Link href=\"/community/blog\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-blog\">Blog</Link></li>\n            </ul>\n          </div>\n\n          {/* Get Involved */}\n          <div>\n            <h3 className=\"font-serif text-lg font-bold mb-4\">Get Involved</h3>\n            <ul className=\"space-y-2\">\n              <li><Link href=\"/donate\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-donate\">Donate</Link></li>\n              <li><Link href=\"/volunteer\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-volunteer\">Volunteer</Link></li>\n              <li><Link href=\"/partnerships\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-partnerships\">Partner With Us</Link></li>\n              <li><Link href=\"/fundraise\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-fundraise\">Fundraise</Link></li>\n              <li><Link href=\"/community/shop\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-shop\">Shop</Link></li>\n              <li><Link href=\"/newsletter\" className=\"text-gray-300 hover:text-accent transition-colors\" data-testid=\"footer-newsletter\">Newsletter</Link></li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Newsletter Signup */}\n        <div className=\"border-t border-gray-700 mt-12 pt-8\">\n          <div className=\"md:flex md:items-center md:justify-between\">\n            <div className=\"mb-4 md:mb-0\">\n              <h3 className=\"font-serif text-lg font-bold mb-2\">Stay Updated</h3>\n              <p className=\"text-gray-300 text-sm\">Get the latest news and impact stories delivered to your inbox.</p>\n            </div>\n            <div className=\"flex max-w-md\">\n              <Input \n                type=\"email\" \n                placeholder=\"Enter your email\" \n                className=\"flex-1 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                data-testid=\"input-newsletter-email\"\n              />\n              <Button className=\"bg-accent hover:bg-orange-600 ml-2\" data-testid=\"button-subscribe\">\n                Subscribe\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Footer */}\n        <div className=\"border-t border-gray-700 mt-8 pt-8 md:flex md:items-center md:justify-between\">\n          <div className=\"text-gray-300 text-sm\">\n            <p>&copy; 2024 Voices of Hope Community-Based Organisation (VOH-CBO). All rights reserved.</p>\n          </div>\n          <div className=\"mt-4 md:mt-0\">\n            <ul className=\"flex space-x-6 text-sm text-gray-300\">\n              <li><Link href=\"/privacy\" className=\"hover:text-accent transition-colors\" data-testid=\"footer-privacy\">Privacy Policy</Link></li>\n              <li><Link href=\"/terms\" className=\"hover:text-accent transition-colors\" data-testid=\"footer-terms\">Terms of Service</Link></li>\n              <li><Link href=\"/accessibility\" className=\"hover:text-accent transition-colors\" data-testid=\"footer-accessibility\">Accessibility</Link></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6528},"client/src/components/Hero.tsx":{"content":"import { Heart, Users, Book, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function Hero() {\n  const scrollToNext = () => {\n    window.scrollTo({ top: window.innerHeight, behavior: 'smooth' });\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background Image with Overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-black/60 to-black/40\">\n        <img \n          src=\"https://images.unsplash.com/photo-1559027615-cd4628902d4a?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\" \n          alt=\"Kenyan women empowerment community\" \n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      \n      <div className=\"relative z-10 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n        <h1 className=\"font-serif text-4xl md:text-6xl lg:text-7xl font-bold mb-6 animate-fade-in\">\n          Raising Her Voice,<br/>\n          <span className=\"text-secondary\">Lifting Her Future</span>\n        </h1>\n        <p className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto opacity-90 animate-slide-up\">\n          Amplifying the voices of girls and women through education, advocacy, leadership, and community inclusion across Kenya.\n        </p>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center animate-slide-up\">\n          <Link href=\"/donate\" data-testid=\"button-donate-hero\">\n            <Button size=\"lg\" className=\"bg-accent hover:bg-orange-600 text-white px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all duration-300\">\n              <Heart className=\"mr-2 h-5 w-5\" />\n              Donate Today\n            </Button>\n          </Link>\n          <Link href=\"/community/events\" data-testid=\"button-join-community\">\n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"border-2 border-white text-white hover:bg-white hover:text-gray-800 px-8 py-4 text-lg font-semibold transition-all duration-300\"\n            >\n              <Users className=\"mr-2 h-5 w-5\" />\n              Join Our Community\n            </Button>\n          </Link>\n          <Link href=\"/programs/education\" data-testid=\"button-learn-more\">\n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"border-2 border-white text-white hover:bg-white hover:text-gray-800 px-8 py-4 text-lg font-semibold transition-all duration-300\"\n            >\n              <Book className=\"mr-2 h-5 w-5\" />\n              Learn More\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Scroll indicator */}\n      <button\n        onClick={scrollToNext}\n        className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white animate-bounce hover:text-secondary transition-colors\"\n        data-testid=\"button-scroll-down\"\n      >\n        <ChevronDown className=\"h-8 w-8\" />\n      </button>\n    </section>\n  );\n}\n","size_bytes":3046},"client/src/components/ImpactStats.tsx":{"content":"export default function ImpactStats() {\n  return (\n    <section className=\"py-20 bg-gradient-to-r from-primary to-secondary text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-bold mb-4\">Our Impact</h2>\n          <p className=\"text-xl opacity-90 max-w-3xl mx-auto\">\n            Creating meaningful change in communities across Kenya through dedicated programs and initiatives\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n          <div className=\"text-center\" data-testid=\"stat-women-empowered\">\n            <div className=\"text-5xl font-bold mb-2\">1,250+</div>\n            <p className=\"text-lg opacity-90\">Women Empowered</p>\n          </div>\n          <div className=\"text-center\" data-testid=\"stat-scholarships\">\n            <div className=\"text-5xl font-bold mb-2\">89</div>\n            <p className=\"text-lg opacity-90\">Scholarships Provided</p>\n          </div>\n          <div className=\"text-center\" data-testid=\"stat-communities\">\n            <div className=\"text-5xl font-bold mb-2\">24</div>\n            <p className=\"text-lg opacity-90\">Communities Reached</p>\n          </div>\n          <div className=\"text-center\" data-testid=\"stat-years\">\n            <div className=\"text-5xl font-bold mb-2\">8</div>\n            <p className=\"text-lg opacity-90\">Years of Service</p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1528},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport Navigation from \"./Navigation\";\nimport Footer from \"./Footer\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-earth-50\">\n      <Navigation />\n      <main>{children}</main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":360},"client/src/components/MissionSection.tsx":{"content":"import { Target, Eye, HandHeart } from \"lucide-react\";\n\nexport default function MissionSection() {\n  return (\n    <section className=\"py-20 bg-white\" id=\"mission\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-4\">Our Foundation</h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Built on the pillars of empowerment, education, and community transformation\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {/* Mission */}\n          <div className=\"bg-earth-50 rounded-2xl p-8 text-center shadow-lg hover:shadow-xl transition-shadow duration-300\" data-testid=\"card-mission\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Target className=\"text-white h-8 w-8\" />\n            </div>\n            <h3 className=\"font-serif text-2xl font-bold text-primary mb-4\">Our Mission</h3>\n            <p className=\"text-gray-600 leading-relaxed\">\n              To amplify the voices of girls and women by promoting education, advocacy, leadership, and community inclusion, creating lasting positive change in their lives and communities.\n            </p>\n          </div>\n\n          {/* Vision */}\n          <div className=\"bg-earth-50 rounded-2xl p-8 text-center shadow-lg hover:shadow-xl transition-shadow duration-300\" data-testid=\"card-vision\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-secondary to-accent rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Eye className=\"text-white h-8 w-8\" />\n            </div>\n            <h3 className=\"font-serif text-2xl font-bold text-primary mb-4\">Our Vision</h3>\n            <p className=\"text-gray-600 leading-relaxed\">\n              A world where every girl and woman has the opportunity to thrive, lead, and contribute meaningfully to their communities and society at large.\n            </p>\n          </div>\n\n          {/* Values */}\n          <div className=\"bg-earth-50 rounded-2xl p-8 text-center shadow-lg hover:shadow-xl transition-shadow duration-300\" data-testid=\"card-values\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-accent to-success rounded-full flex items-center justify-center mx-auto mb-6\">\n              <HandHeart className=\"text-white h-8 w-8\" />\n            </div>\n            <h3 className=\"font-serif text-2xl font-bold text-primary mb-4\">Core Values</h3>\n            <p className=\"text-gray-600 leading-relaxed\">\n              Empowerment, Integrity, Inclusivity, Excellence, and Community-driven approach guide everything we do in our mission to transform lives.\n            </p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2900},"client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Heart, Menu, X, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Navigation() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n  const { user, logoutMutation } = useAuth();\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <nav className=\"bg-white shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-20\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n              <Heart className=\"text-white text-xl\" />\n            </div>\n            <div>\n              <h1 className=\"font-serif text-xl font-bold text-primary\">VOH-CBO</h1>\n              <p className=\"text-xs text-gray-600\">Voices of Hope</p>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden lg:flex items-center space-x-8\">\n            <Link href=\"/\" className=\"text-gray-700 hover:text-primary transition-colors duration-200 font-medium\" data-testid=\"nav-home\">\n              Home\n            </Link>\n            \n            {/* Who We Are Dropdown */}\n            <div className=\"dropdown relative group\">\n              <button className=\"text-gray-700 hover:text-primary transition-colors duration-200 font-medium flex items-center\" data-testid=\"nav-who-we-are\">\n                Who We Are <ChevronDown className=\"ml-1 h-4 w-4\" />\n              </button>\n              <div className=\"dropdown-menu absolute top-full left-0 mt-2 w-56 bg-white rounded-lg shadow-xl border opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200\">\n                <Link href=\"/about/history\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-history\">\n                  Our History\n                </Link>\n                <Link href=\"/about/team\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-team\">\n                  Our Team\n                </Link>\n                <Link href=\"/about/partnerships\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-partnerships\">\n                  Community & Partnerships\n                </Link>\n                <Link href=\"/about/scholarships\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-scholarships\">\n                  Scholarships\n                </Link>\n              </div>\n            </div>\n\n            {/* What We Do Dropdown */}\n            <div className=\"dropdown relative group\">\n              <button className=\"text-gray-700 hover:text-primary transition-colors duration-200 font-medium flex items-center\" data-testid=\"nav-what-we-do\">\n                What We Do <ChevronDown className=\"ml-1 h-4 w-4\" />\n              </button>\n              <div className=\"dropdown-menu absolute top-full left-0 mt-2 w-64 bg-white rounded-lg shadow-xl border opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200\">\n                <Link href=\"/programs/voices\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-voices\">\n                  Give Voices to Women\n                </Link>\n                <Link href=\"/programs/education\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-education\">\n                  Education & Programs\n                </Link>\n                <Link href=\"/programs/beneficiaries\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-beneficiaries\">\n                  Target Beneficiaries\n                </Link>\n              </div>\n            </div>\n\n            {/* Community Dropdown */}\n            <div className=\"dropdown relative group\">\n              <button className=\"text-gray-700 hover:text-primary transition-colors duration-200 font-medium flex items-center\" data-testid=\"nav-community\">\n                Community <ChevronDown className=\"ml-1 h-4 w-4\" />\n              </button>\n              <div className=\"dropdown-menu absolute top-full left-0 mt-2 w-48 bg-white rounded-lg shadow-xl border opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200\">\n                <Link href=\"/community/events\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-events\">\n                  Events\n                </Link>\n                <Link href=\"/community/photos\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-photos\">\n                  Photos\n                </Link>\n                <Link href=\"/community/blog\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-blog\">\n                  Blogs & Features\n                </Link>\n                <Link href=\"/community/shop\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-shop\">\n                  Shop\n                </Link>\n              </div>\n            </div>\n\n            {/* Donate Dropdown */}\n            <div className=\"dropdown relative group\">\n              <button className=\"text-gray-700 hover:text-primary transition-colors duration-200 font-medium flex items-center\" data-testid=\"nav-donate\">\n                Donate <ChevronDown className=\"ml-1 h-4 w-4\" />\n              </button>\n              <div className=\"dropdown-menu absolute top-full left-0 mt-2 w-48 bg-white rounded-lg shadow-xl border opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200\">\n                <Link href=\"/donate\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-general-donations\">\n                  General Donations\n                </Link>\n                <Link href=\"/donate/gifts\" className=\"block px-4 py-3 text-sm text-gray-700 hover:bg-earth-100 transition-colors\" data-testid=\"nav-gifts\">\n                  Gifts\n                </Link>\n              </div>\n            </div>\n\n            <Link href=\"/contact\" className=\"text-gray-700 hover:text-primary transition-colors duration-200 font-medium\" data-testid=\"nav-contact\">\n              Contact\n            </Link>\n            \n            {user ? (\n              <div className=\"flex items-center space-x-4\">\n                <Link href=\"/admin\" className=\"text-gray-700 hover:text-primary transition-colors duration-200 font-medium\" data-testid=\"nav-admin\">\n                  Admin\n                </Link>\n                <Button onClick={handleLogout} variant=\"outline\" size=\"sm\" data-testid=\"button-logout\">\n                  Logout\n                </Button>\n              </div>\n            ) : (\n              <Link href=\"/auth\" data-testid=\"nav-auth\">\n                <Button variant=\"outline\" size=\"sm\">\n                  Admin Login\n                </Button>\n              </Link>\n            )}\n            \n            <Link href=\"/donate\" data-testid=\"button-donate-header\">\n              <Button className=\"bg-accent text-white hover:bg-orange-600\">\n                Donate Now\n              </Button>\n            </Link>\n          </div>\n\n          {/* Mobile menu button */}\n          <button \n            className=\"lg:hidden p-2\" \n            onClick={toggleMobileMenu}\n            data-testid=\"button-mobile-menu\"\n          >\n            {isMobileMenuOpen ? (\n              <X className=\"h-6 w-6 text-gray-700\" />\n            ) : (\n              <Menu className=\"h-6 w-6 text-gray-700\" />\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Mobile Navigation Menu */}\n      {isMobileMenuOpen && (\n        <div className=\"lg:hidden bg-white border-t\" data-testid=\"mobile-menu\">\n          <div className=\"px-4 py-4 space-y-3\">\n            <Link href=\"/\" className=\"block py-2 text-gray-700 font-medium\" data-testid=\"mobile-nav-home\">\n              Home\n            </Link>\n            <div className=\"border-l-2 border-earth-300 pl-4 space-y-2\">\n              <p className=\"font-medium text-primary\">Who We Are</p>\n              <Link href=\"/about/history\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-history\">\n                Our History\n              </Link>\n              <Link href=\"/about/team\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-team\">\n                Our Team\n              </Link>\n              <Link href=\"/about/partnerships\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-partnerships\">\n                Community & Partnerships\n              </Link>\n              <Link href=\"/about/scholarships\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-scholarships\">\n                Scholarships\n              </Link>\n            </div>\n            <div className=\"border-l-2 border-earth-300 pl-4 space-y-2\">\n              <p className=\"font-medium text-primary\">What We Do</p>\n              <Link href=\"/programs/voices\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-voices\">\n                Give Voices to Women\n              </Link>\n              <Link href=\"/programs/education\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-education\">\n                Education & Programs\n              </Link>\n              <Link href=\"/programs/beneficiaries\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-beneficiaries\">\n                Target Beneficiaries\n              </Link>\n            </div>\n            <div className=\"border-l-2 border-earth-300 pl-4 space-y-2\">\n              <p className=\"font-medium text-primary\">Community</p>\n              <Link href=\"/community/events\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-events\">\n                Events\n              </Link>\n              <Link href=\"/community/photos\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-photos\">\n                Photos\n              </Link>\n              <Link href=\"/community/blog\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-blog\">\n                Blogs & Features\n              </Link>\n              <Link href=\"/community/shop\" className=\"block py-1 text-sm text-gray-600\" data-testid=\"mobile-nav-shop\">\n                Shop\n              </Link>\n            </div>\n            <Link href=\"/contact\" className=\"block py-2 text-gray-700 font-medium\" data-testid=\"mobile-nav-contact\">\n              Contact\n            </Link>\n            {user && (\n              <Link href=\"/admin\" className=\"block py-2 text-gray-700 font-medium\" data-testid=\"mobile-nav-admin\">\n                Admin Dashboard\n              </Link>\n            )}\n            <Button className=\"w-full bg-accent text-white font-medium mt-4\" data-testid=\"mobile-button-donate\">\n              Donate Now\n            </Button>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":11672},"client/src/components/ProgramsSection.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport type { Program } from \"@shared/schema\";\n\nexport default function ProgramsSection() {\n  const { data: programs, isLoading } = useQuery<Program[]>({\n    queryKey: [\"/api/programs\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <Skeleton className=\"h-12 w-96 mx-auto mb-4\" />\n            <Skeleton className=\"h-6 w-120 mx-auto\" />\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-2xl shadow-lg overflow-hidden\">\n                <Skeleton className=\"w-full h-48\" />\n                <div className=\"p-6\">\n                  <Skeleton className=\"h-6 w-32 mb-3\" />\n                  <Skeleton className=\"h-4 w-full mb-2\" />\n                  <Skeleton className=\"h-4 w-3/4 mb-4\" />\n                  <Skeleton className=\"h-4 w-24\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-20 bg-white\" id=\"programs\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-4\">What We Do</h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Comprehensive programs designed to empower, educate, and elevate women and girls in Kenya\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {programs?.slice(0, 6).map((program) => (\n            <div key={program.id} className=\"bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300\" data-testid={`card-program-${program.id}`}>\n              {program.imageUrl && (\n                <img \n                  src={program.imageUrl} \n                  alt={program.title}\n                  className=\"w-full h-48 object-cover\"\n                />\n              )}\n              <div className=\"p-6\">\n                <h3 className=\"font-serif text-xl font-bold text-primary mb-3\">{program.title}</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  {program.description}\n                </p>\n                <Button variant=\"ghost\" className=\"text-accent hover:text-orange-600 p-0 h-auto font-semibold\" data-testid={`button-learn-more-${program.id}`}>\n                  Learn More <ArrowRight className=\"ml-1 h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {!programs?.length && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500 text-lg\">No programs available at the moment.</p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":3186},"client/src/components/TeamSection.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Linkedin, Twitter, Mail } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport type { TeamMember } from \"@shared/schema\";\n\nexport default function TeamSection() {\n  const { data: team, isLoading } = useQuery<TeamMember[]>({\n    queryKey: [\"/api/team\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <Skeleton className=\"h-12 w-96 mx-auto mb-4\" />\n            <Skeleton className=\"h-6 w-120 mx-auto\" />\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-2xl shadow-lg overflow-hidden\">\n                <Skeleton className=\"w-full h-64\" />\n                <div className=\"p-6\">\n                  <Skeleton className=\"h-6 w-32 mb-1\" />\n                  <Skeleton className=\"h-4 w-24 mb-3\" />\n                  <Skeleton className=\"h-4 w-full mb-2\" />\n                  <Skeleton className=\"h-4 w-3/4 mb-4\" />\n                  <div className=\"flex space-x-3\">\n                    <Skeleton className=\"h-6 w-6\" />\n                    <Skeleton className=\"h-6 w-6\" />\n                    <Skeleton className=\"h-6 w-6\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-20 bg-white\" id=\"team\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-4\">Meet Our Team</h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Dedicated professionals and volunteers working tirelessly to empower women and girls across Kenya\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n          {team?.slice(0, 4).map((member) => (\n            <div key={member.id} className=\"bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2\" data-testid={`card-team-member-${member.id}`}>\n              {member.imageUrl && (\n                <img \n                  src={member.imageUrl} \n                  alt={`${member.name} portrait`}\n                  className=\"w-full h-64 object-cover\"\n                />\n              )}\n              <div className=\"p-6\">\n                <h3 className=\"font-serif text-xl font-bold text-primary mb-1\" data-testid={`text-name-${member.id}`}>\n                  {member.name}\n                </h3>\n                <p className=\"text-accent font-semibold mb-3\" data-testid={`text-role-${member.id}`}>\n                  {member.role}\n                </p>\n                <p className=\"text-gray-600 text-sm mb-4\" data-testid={`text-bio-${member.id}`}>\n                  {member.bio}\n                </p>\n                <div className=\"flex space-x-3\">\n                  {member.linkedinUrl && (\n                    <a \n                      href={member.linkedinUrl} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-gray-400 hover:text-primary transition-colors\"\n                      data-testid={`link-linkedin-${member.id}`}\n                    >\n                      <Linkedin className=\"h-5 w-5\" />\n                    </a>\n                  )}\n                  {member.twitterUrl && (\n                    <a \n                      href={member.twitterUrl} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-gray-400 hover:text-primary transition-colors\"\n                      data-testid={`link-twitter-${member.id}`}\n                    >\n                      <Twitter className=\"h-5 w-5\" />\n                    </a>\n                  )}\n                  {member.email && (\n                    <a \n                      href={`mailto:${member.email}`}\n                      className=\"text-gray-400 hover:text-primary transition-colors\"\n                      data-testid={`link-email-${member.id}`}\n                    >\n                      <Mail className=\"h-5 w-5\" />\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {team && team.length > 4 && (\n          <div className=\"text-center mt-12\">\n            <Link href=\"/about/team\" data-testid=\"button-view-all-team\">\n              <Button className=\"bg-accent hover:bg-orange-600 text-white px-8 py-3 font-semibold\">\n                View All Team Members\n              </Button>\n            </Link>\n          </div>\n        )}\n\n        {!team?.length && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500 text-lg\">No team members available at the moment.</p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":5284},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\ntype RegisterData = Pick<InsertUser, \"username\" | \"email\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid username or password. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome to VOH-CBO!\",\n        description: \"Your account has been created successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3310},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen bg-earth-50\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":688},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Heart, Users, BookOpen, ArrowRight } from \"lucide-react\";\nimport { Redirect } from \"wouter\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({ username: \"\", email: \"\", password: \"\" });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-earth-50 to-earth-200 flex\">\n      {/* Left side - Auth Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Heart className=\"text-white h-8 w-8\" />\n            </div>\n            <h1 className=\"font-serif text-3xl font-bold text-primary mb-2\">Welcome to VOH-CBO</h1>\n            <p className=\"text-gray-600\">Admin Access Portal</p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Admin Login</CardTitle>\n                  <CardDescription>\n                    Sign in to access the admin dashboard\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        type=\"text\"\n                        value={loginData.username}\n                        onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n                        required\n                        data-testid=\"input-login-username\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        type=\"password\"\n                        value={loginData.password}\n                        onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                        required\n                        data-testid=\"input-login-password\"\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-primary hover:bg-primary/90\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create Admin Account</CardTitle>\n                  <CardDescription>\n                    Register a new admin account for VOH-CBO\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"register-username\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        type=\"text\"\n                        value={registerData.username}\n                        onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}\n                        required\n                        data-testid=\"input-register-username\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"register-email\">Email</Label>\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        value={registerData.email}\n                        onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}\n                        required\n                        data-testid=\"input-register-email\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        value={registerData.password}\n                        onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                        required\n                        data-testid=\"input-register-password\"\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-primary hover:bg-primary/90\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-primary to-secondary flex items-center justify-center p-8 text-white\">\n        <div className=\"max-w-lg text-center\">\n          <h2 className=\"font-serif text-4xl font-bold mb-6\">Voices of Hope</h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Empowering women and girls across Kenya through education, advocacy, and community inclusion.\n          </p>\n          \n          <div className=\"space-y-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                <Users className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Community Building</h3>\n                <p className=\"text-sm opacity-80\">Creating inclusive spaces for growth</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                <BookOpen className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Education & Leadership</h3>\n                <p className=\"text-sm opacity-80\">Providing learning opportunities</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                <Heart className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Lasting Impact</h3>\n                <p className=\"text-sm opacity-80\">Creating sustainable change</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-8 pt-8 border-t border-white/20\">\n            <p className=\"text-sm opacity-80\">\n              Join our admin portal to manage content, track impact, and support our mission.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8774},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, Phone, Mail, Clock, Send, Facebook, Twitter, Instagram, Linkedin, Youtube } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\n\nexport default function ContactPage() {\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    inquiryType: \"\",\n    message: \"\",\n    newsletter: false,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const res = await apiRequest(\"POST\", \"/api/contact\", {\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        phone: data.phone,\n        inquiryType: data.inquiryType,\n        message: data.message,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"Thank you for reaching out. We'll get back to you soon.\",\n      });\n      setFormData({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        phone: \"\",\n        inquiryType: \"\",\n        message: \"\",\n        newsletter: false,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.firstName || !formData.lastName || !formData.email || !formData.inquiryType || !formData.message) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    contactMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-6\">Get In Touch</h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n              Ready to join our mission? Have questions about our programs? Want to get involved? \n              We'd love to hear from you and explore how we can work together to empower women and girls across Kenya.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <div>\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"font-serif text-2xl text-primary\">Send us a message</CardTitle>\n                  <p className=\"text-gray-600\">\n                    Fill out the form below and we'll get back to you as soon as possible.\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-contact\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"firstName\">First Name *</Label>\n                        <Input \n                          id=\"firstName\"\n                          type=\"text\" \n                          value={formData.firstName}\n                          onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                          required\n                          data-testid=\"input-first-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"lastName\">Last Name *</Label>\n                        <Input \n                          id=\"lastName\"\n                          type=\"text\" \n                          value={formData.lastName}\n                          onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                          required\n                          data-testid=\"input-last-name\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"email\">Email Address *</Label>\n                      <Input \n                        id=\"email\"\n                        type=\"email\" \n                        value={formData.email}\n                        onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                        required\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"phone\">Phone Number (Optional)</Label>\n                      <Input \n                        id=\"phone\"\n                        type=\"tel\" \n                        value={formData.phone}\n                        onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                        placeholder=\"+254 700 123 456\"\n                        data-testid=\"input-phone\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>Inquiry Type *</Label>\n                      <Select value={formData.inquiryType} onValueChange={(value) => handleInputChange(\"inquiryType\", value)}>\n                        <SelectTrigger data-testid=\"select-inquiry-type\">\n                          <SelectValue placeholder=\"Select Inquiry Type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"volunteer\">Volunteer Opportunity</SelectItem>\n                          <SelectItem value=\"partnership\">Partnership</SelectItem>\n                          <SelectItem value=\"donation\">Donation Inquiry</SelectItem>\n                          <SelectItem value=\"program\">Program Information</SelectItem>\n                          <SelectItem value=\"media\">Media/Press</SelectItem>\n                          <SelectItem value=\"scholarship\">Scholarship Information</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"message\">Your Message *</Label>\n                      <Textarea \n                        id=\"message\"\n                        rows={5}\n                        value={formData.message}\n                        onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                        placeholder=\"Tell us about your inquiry, how you'd like to get involved, or any questions you have...\"\n                        required\n                        data-testid=\"textarea-message\"\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"newsletter\"\n                        checked={formData.newsletter}\n                        onCheckedChange={(checked) => handleInputChange(\"newsletter\", !!checked)}\n                        data-testid=\"checkbox-newsletter\"\n                      />\n                      <Label htmlFor=\"newsletter\" className=\"text-sm text-gray-600\">\n                        Subscribe to our newsletter for updates and impact stories\n                      </Label>\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      disabled={contactMutation.isPending}\n                      className=\"w-full bg-accent hover:bg-orange-600 text-white py-3 font-semibold\"\n                      data-testid=\"button-send-message\"\n                    >\n                      <Send className=\"mr-2 h-4 w-4\" />\n                      {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"space-y-8\">\n              {/* Contact Details */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"font-serif text-2xl text-primary\">Contact Information</CardTitle>\n                  <p className=\"text-gray-600\">\n                    You can reach us through any of the following channels.\n                  </p>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\" data-testid=\"contact-address\">\n                    <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                      <MapPin className=\"text-white h-5 w-5\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-primary\">Address</p>\n                      <p className=\"text-gray-600\">\n                        Nairobi, Kenya<br/>\n                        P.O. Box 12345-00100<br/>\n                        Central Business District\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\" data-testid=\"contact-phone\">\n                    <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Phone className=\"text-white h-5 w-5\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-primary\">Phone</p>\n                      <p className=\"text-gray-600\">\n                        +254 700 123 456<br/>\n                        +254 722 987 654\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\" data-testid=\"contact-email\">\n                    <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Mail className=\"text-white h-5 w-5\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-primary\">Email</p>\n                      <p className=\"text-gray-600\">\n                        info@voh-cbo.org<br/>\n                        programs@voh-cbo.org\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\" data-testid=\"contact-hours\">\n                    <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Clock className=\"text-white h-5 w-5\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-primary\">Office Hours</p>\n                      <p className=\"text-gray-600\">\n                        Monday - Friday: 8:00 AM - 5:00 PM<br/>\n                        Saturday: 9:00 AM - 2:00 PM<br/>\n                        Sunday: Closed\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Social Media */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"font-serif text-2xl text-primary\">Follow Us</CardTitle>\n                  <p className=\"text-gray-600\">\n                    Stay connected with us on social media for updates and stories.\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-4\">\n                    <a \n                      href=\"#\" \n                      className=\"w-12 h-12 bg-blue-600 hover:bg-blue-700 rounded-full flex items-center justify-center text-white transition-colors duration-200\" \n                      data-testid=\"link-facebook\"\n                    >\n                      <Facebook className=\"h-5 w-5\" />\n                    </a>\n                    <a \n                      href=\"#\" \n                      className=\"w-12 h-12 bg-blue-400 hover:bg-blue-500 rounded-full flex items-center justify-center text-white transition-colors duration-200\" \n                      data-testid=\"link-twitter\"\n                    >\n                      <Twitter className=\"h-5 w-5\" />\n                    </a>\n                    <a \n                      href=\"#\" \n                      className=\"w-12 h-12 bg-pink-600 hover:bg-pink-700 rounded-full flex items-center justify-center text-white transition-colors duration-200\" \n                      data-testid=\"link-instagram\"\n                    >\n                      <Instagram className=\"h-5 w-5\" />\n                    </a>\n                    <a \n                      href=\"#\" \n                      className=\"w-12 h-12 bg-blue-700 hover:bg-blue-800 rounded-full flex items-center justify-center text-white transition-colors duration-200\" \n                      data-testid=\"link-linkedin\"\n                    >\n                      <Linkedin className=\"h-5 w-5\" />\n                    </a>\n                    <a \n                      href=\"#\" \n                      className=\"w-12 h-12 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center text-white transition-colors duration-200\" \n                      data-testid=\"link-youtube\"\n                    >\n                      <Youtube className=\"h-5 w-5\" />\n                    </a>\n                  </div>\n                  <p className=\"text-gray-600 mt-4 text-sm\">\n                    Stay connected for updates, success stories, and ways to get involved in our mission.\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Map Placeholder */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"font-serif text-2xl text-primary\">Visit Us</CardTitle>\n                  <p className=\"text-gray-600\">\n                    Find us in Nairobi's Central Business District.\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-gray-200 rounded-lg h-64 flex items-center justify-center\" data-testid=\"map-placeholder\">\n                    <div className=\"text-center text-gray-500\">\n                      <MapPin className=\"h-16 w-16 mx-auto mb-4\" />\n                      <p className=\"font-semibold\">Interactive Map</p>\n                      <p className=\"text-sm\">Google Maps Integration</p>\n                      <p className=\"text-xs mt-2\">Nairobi Central Business District</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* FAQ Section */}\n          <div className=\"mt-20\">\n            <h2 className=\"font-serif text-3xl font-bold text-primary text-center mb-12\">Frequently Asked Questions</h2>\n            <div className=\"grid md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n              <div className=\"bg-white rounded-lg p-6 shadow-lg\">\n                <h3 className=\"font-semibold text-primary mb-3\">How can I volunteer with VOH-CBO?</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  We welcome volunteers in various capacities. Contact us through the form above or email \n                  programs@voh-cbo.org to learn about current volunteer opportunities.\n                </p>\n              </div>\n              \n              <div className=\"bg-white rounded-lg p-6 shadow-lg\">\n                <h3 className=\"font-semibold text-primary mb-3\">Are donations tax-deductible?</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Yes, VOH-CBO is a registered nonprofit organization. All donations are tax-deductible. \n                  You'll receive a receipt for your tax records.\n                </p>\n              </div>\n              \n              <div className=\"bg-white rounded-lg p-6 shadow-lg\">\n                <h3 className=\"font-semibold text-primary mb-3\">How do I apply for a scholarship?</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Scholarship applications are typically available at the beginning of each academic year. \n                  Contact us for current application deadlines and requirements.\n                </p>\n              </div>\n              \n              <div className=\"bg-white rounded-lg p-6 shadow-lg\">\n                <h3 className=\"font-semibold text-primary mb-3\">Can organizations partner with VOH-CBO?</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Absolutely! We're always looking for strategic partnerships. Select \"Partnership\" in \n                  the inquiry form above to discuss collaboration opportunities.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Emergency Contact */}\n          <div className=\"mt-16 bg-gradient-to-r from-primary to-secondary rounded-2xl p-8 text-white text-center\">\n            <h2 className=\"font-serif text-2xl font-bold mb-4\">Emergency or Urgent Matters</h2>\n            <p className=\"mb-6 opacity-90\">\n              If you have an urgent matter or emergency that requires immediate attention, \n              please call us directly during office hours.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <a \n                href=\"tel:+254700123456\" \n                className=\"bg-white text-primary px-6 py-3 rounded-full font-semibold hover:bg-gray-100 transition-colors\"\n                data-testid=\"button-call-emergency\"\n              >\n                Call: +254 700 123 456\n              </a>\n              <a \n                href=\"mailto:info@voh-cbo.org\" \n                className=\"border-2 border-white text-white px-6 py-3 rounded-full font-semibold hover:bg-white hover:text-primary transition-colors\"\n                data-testid=\"button-email-emergency\"\n              >\n                Email: info@voh-cbo.org\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":19169},"client/src/pages/donation-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, useStripe, useElements, PaymentElement } from \"@stripe/react-stripe-js\";\nimport { Heart, Lock, ArrowLeft, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Link } from \"wouter\";\n\n// Initialize Stripe\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY || \"\");\n\nconst CheckoutForm = ({ donationData }: { donationData: any }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/donation-success`,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button\n        type=\"submit\"\n        disabled={!stripe || isProcessing}\n        className=\"w-full bg-accent hover:bg-orange-600 text-white py-4 text-lg font-semibold\"\n        data-testid=\"button-confirm-payment\"\n      >\n        <Heart className=\"mr-2 h-5 w-5\" />\n        {isProcessing ? \"Processing...\" : `Donate $${donationData.amount}`}\n      </Button>\n      <p className=\"text-xs text-gray-500 text-center\">\n        <Lock className=\"inline h-3 w-3 mr-1\" />\n        Your payment is secure and encrypted\n      </p>\n    </form>\n  );\n};\n\nexport default function DonationPage() {\n  const [location] = useLocation();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [donationData, setDonationData] = useState<any>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Parse URL parameters\n    const urlParams = new URLSearchParams(location.split('?')[1] || '');\n    const amount = urlParams.get('amount');\n    const type = urlParams.get('type');\n    const firstName = urlParams.get('firstName');\n    const lastName = urlParams.get('lastName');\n    const email = urlParams.get('email');\n    const method = urlParams.get('method');\n\n    if (!amount) {\n      toast({\n        title: \"Missing donation amount\",\n        description: \"Please go back and select a donation amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      amount: parseFloat(amount),\n      currency: \"USD\",\n      donorName: `${firstName || ''} ${lastName || ''}`.trim(),\n      donorEmail: email || '',\n      isRecurring: type === 'monthly',\n      paymentMethod: method || 'card',\n    };\n\n    setDonationData(data);\n\n    // Create payment intent\n    apiRequest(\"POST\", \"/api/create-payment-intent\", data)\n      .then((res) => res.json())\n      .then((response) => {\n        if (response.clientSecret) {\n          setClientSecret(response.clientSecret);\n        } else {\n          throw new Error(\"No client secret received\");\n        }\n      })\n      .catch((error) => {\n        toast({\n          title: \"Failed to initialize payment\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      });\n  }, [location, toast]);\n\n  if (!donationData) {\n    return (\n      <Layout>\n        <div className=\"min-h-screen bg-earth-50 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-primary mb-4\">Invalid Donation Request</h2>\n            <p className=\"text-gray-600 mb-6\">Please go back and select a donation amount.</p>\n            <Link href=\"/\">\n              <Button>Return Home</Button>\n            </Link>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <Layout>\n        <div className=\"min-h-screen bg-earth-50 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Preparing your donation...</p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"mb-8\">\n            <Link href=\"/\" className=\"inline-flex items-center text-primary hover:text-primary/80 mb-4\" data-testid=\"link-back-home\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Link>\n            <h1 className=\"font-serif text-4xl font-bold text-primary mb-2\">Complete Your Donation</h1>\n            <p className=\"text-gray-600\">Your contribution makes a real difference in empowering women and girls in Kenya</p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* Payment Form */}\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Heart className=\"h-5 w-5 text-accent\" />\n                    <span>Donation Details</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {clientSecret && (\n                    <Elements \n                      stripe={stripePromise} \n                      options={{ \n                        clientSecret,\n                        appearance: {\n                          theme: 'stripe',\n                          variables: {\n                            colorPrimary: '#8B4513',\n                            colorBackground: '#ffffff',\n                            colorText: '#30312e',\n                            colorDanger: '#df1b41',\n                            fontFamily: 'Inter, sans-serif',\n                            spacingUnit: '4px',\n                            borderRadius: '8px',\n                          }\n                        }\n                      }}\n                    >\n                      <CheckoutForm donationData={donationData} />\n                    </Elements>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Donation Summary & Impact */}\n            <div className=\"space-y-6\">\n              {/* Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Donation Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Amount:</span>\n                    <span className=\"font-semibold\">${donationData.amount}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Type:</span>\n                    <span className=\"capitalize\">{donationData.isRecurring ? 'Monthly' : 'One-time'}</span>\n                  </div>\n                  {donationData.donorName && (\n                    <div className=\"flex justify-between\">\n                      <span>Donor:</span>\n                      <span>{donationData.donorName}</span>\n                    </div>\n                  )}\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between font-bold text-lg\">\n                      <span>Total:</span>\n                      <span className=\"text-primary\">${donationData.amount}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Impact Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Your Impact</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {donationData.amount >= 100 && (\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-success rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Check className=\"text-white h-4 w-4\" />\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">Scholarship Support</p>\n                        <p className=\"text-sm text-gray-600\">Supports one scholarship recipient for three months</p>\n                      </div>\n                    </div>\n                  )}\n                  {donationData.amount >= 50 && (\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-success rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Check className=\"text-white h-4 w-4\" />\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">Leadership Training</p>\n                        <p className=\"text-sm text-gray-600\">Funds leadership training workshop for 5 women</p>\n                      </div>\n                    </div>\n                  )}\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-8 h-8 bg-success rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Check className=\"text-white h-4 w-4\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\">Educational Materials</p>\n                      <p className=\"text-sm text-gray-600\">Provides educational materials for girls in need</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Thank You Message */}\n              <Card className=\"bg-gradient-to-br from-secondary/10 to-accent/10\">\n                <CardContent className=\"pt-6\">\n                  <h3 className=\"font-serif text-xl font-bold text-primary mb-3\">Thank You!</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Your generous donation directly supports our mission to empower women and girls across Kenya. \n                    Together, we're creating lasting change in communities.\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    You will receive an email confirmation once your donation is processed.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":11211},"client/src/pages/home-page.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport Hero from \"@/components/Hero\";\nimport MissionSection from \"@/components/MissionSection\";\nimport ImpactStats from \"@/components/ImpactStats\";\nimport ProgramsSection from \"@/components/ProgramsSection\";\nimport DonationSection from \"@/components/DonationSection\";\nimport TeamSection from \"@/components/TeamSection\";\nimport ContactSection from \"@/components/ContactSection\";\n\nexport default function HomePage() {\n  return (\n    <Layout>\n      <Hero />\n      <MissionSection />\n      <ImpactStats />\n      <ProgramsSection />\n      <DonationSection />\n      <TeamSection />\n      <ContactSection />\n    </Layout>\n  );\n}\n","size_bytes":664},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/about/history.tsx":{"content":"import { History, CheckCircle, Users, Award, Heart } from \"lucide-react\";\nimport Layout from \"@/components/Layout\";\n\nexport default function HistoryPage() {\n  const milestones = [\n    {\n      year: \"2016\",\n      title: \"Foundation of VOH-CBO\",\n      description: \"Voices of Hope Community-Based Organisation was founded with a vision to amplify the voices of girls and women in Kenya.\",\n      icon: Heart,\n    },\n    {\n      year: \"2017\",\n      title: \"First Education Program Launched\",\n      description: \"Started our flagship digital literacy program, reaching 50 young women in rural communities.\",\n      icon: CheckCircle,\n    },\n    {\n      year: \"2018\",\n      title: \"Community Partnerships Established\",\n      description: \"Formed strategic partnerships with local schools and women's groups to expand our reach.\",\n      icon: Users,\n    },\n    {\n      year: \"2019\",\n      title: \"Leadership Training Initiative\",\n      description: \"Launched comprehensive leadership development programs for women and girls.\",\n      icon: Award,\n    },\n    {\n      year: \"2020\",\n      title: \"Digital Expansion\",\n      description: \"Adapted to COVID-19 by expanding online programs and virtual mentorship opportunities.\",\n      icon: CheckCircle,\n    },\n    {\n      year: \"2021\",\n      title: \"Scholarship Program\",\n      description: \"Established scholarship fund providing educational support to underprivileged girls.\",\n      icon: Award,\n    },\n    {\n      year: \"2022\",\n      title: \"1000+ Women Empowered Milestone\",\n      description: \"Reached our milestone of empowering over 1,000 women and girls across Kenya.\",\n      icon: Users,\n    },\n    {\n      year: \"2023\",\n      title: \"International Recognition\",\n      description: \"Received recognition from international organizations for our impactful community work.\",\n      icon: Award,\n    },\n    {\n      year: \"2024\",\n      title: \"Digital Platform Launch\",\n      description: \"Launched our comprehensive digital platform to better serve our community and supporters.\",\n      icon: CheckCircle,\n    },\n  ];\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-6\">Our History</h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n              From humble beginnings to transformative impact. Discover the journey of Voices of Hope \n              Community-Based Organisation and how we've grown to empower thousands of women and girls across Kenya.\n            </p>\n          </div>\n\n          {/* Mission Origin Story */}\n          <div className=\"mb-20\">\n            <div className=\"bg-white rounded-2xl shadow-lg p-8 md:p-12\">\n              <h2 className=\"font-serif text-3xl font-bold text-primary mb-6\">Where It All Began</h2>\n              <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n                <div>\n                  <p className=\"text-gray-600 leading-relaxed mb-4\">\n                    In 2016, a group of passionate advocates recognized a critical need in Kenyan communities: \n                    the voices of girls and women were often unheard, their potential untapped, and their \n                    opportunities limited by systemic barriers.\n                  </p>\n                  <p className=\"text-gray-600 leading-relaxed mb-4\">\n                    What started as informal mentorship sessions in local community centers has grown into \n                    a comprehensive organization that addresses education, advocacy, leadership development, \n                    and community inclusion.\n                  </p>\n                  <p className=\"text-gray-600 leading-relaxed\">\n                    Today, VOH-CBO stands as a beacon of hope, having directly impacted over 1,250 women \n                    and girls, provided 89 scholarships, and reached 24 communities across Kenya.\n                  </p>\n                </div>\n                <div className=\"bg-gradient-to-br from-primary/10 to-secondary/10 rounded-xl p-8\">\n                  <h3 className=\"font-serif text-xl font-bold text-primary mb-4\">Our Founding Principles</h3>\n                  <ul className=\"space-y-3\">\n                    <li className=\"flex items-start\">\n                      <CheckCircle className=\"h-5 w-5 text-success mr-3 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-700\">Every woman's voice matters</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <CheckCircle className=\"h-5 w-5 text-success mr-3 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-700\">Education is a fundamental right</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <CheckCircle className=\"h-5 w-5 text-success mr-3 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-700\">Community-driven solutions work</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <CheckCircle className=\"h-5 w-5 text-success mr-3 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-700\">Sustainable change takes time</span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* History */}\n          <div className=\"mb-16\">\n            <h2 className=\"font-serif text-3xl font-bold text-primary text-center mb-12\">Our Journey</h2>\n            <div className=\"relative\">\n              {/* History line */}\n              <div className=\"absolute left-4 md:left-1/2 top-0 bottom-0 w-0.5 bg-primary/20 transform md:-translate-x-0.5\"></div>\n              \n              <div className=\"space-y-12\">\n                {milestones.map((milestone, index) => (\n                  <div \n                    key={milestone.year} \n                    className={`relative flex items-start ${\n                      index % 2 === 0 ? 'md:flex-row' : 'md:flex-row-reverse'\n                    }`}\n                    data-testid={`milestone-${milestone.year}`}\n                  >\n                    {/* History dot */}\n                    <div className=\"absolute left-4 md:left-1/2 w-8 h-8 bg-primary rounded-full transform md:-translate-x-4 flex items-center justify-center z-10\">\n                      <milestone.icon className=\"h-4 w-4 text-white\" />\n                    </div>\n                    \n                    {/* Content */}\n                    <div className={`ml-16 md:ml-0 md:w-1/2 ${index % 2 === 0 ? 'md:pr-8' : 'md:pl-8'}`}>\n                      <div className=\"bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300\">\n                        <div className=\"flex items-center mb-3\">\n                          <span className=\"bg-primary text-white px-3 py-1 rounded-full text-sm font-semibold\">\n                            {milestone.year}\n                          </span>\n                        </div>\n                        <h3 className=\"font-serif text-xl font-bold text-primary mb-3\">\n                          {milestone.title}\n                        </h3>\n                        <p className=\"text-gray-600 leading-relaxed\">\n                          {milestone.description}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Impact Statistics */}\n          <div className=\"bg-gradient-to-r from-primary to-secondary rounded-2xl p-12 text-white text-center\">\n            <h2 className=\"font-serif text-3xl font-bold mb-8\">8 Years of Impact</h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div>\n                <div className=\"text-4xl font-bold mb-2\">1,250+</div>\n                <div className=\"text-lg opacity-90\">Women Empowered</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold mb-2\">89</div>\n                <div className=\"text-lg opacity-90\">Scholarships Provided</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold mb-2\">24</div>\n                <div className=\"text-lg opacity-90\">Communities Reached</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold mb-2\">50+</div>\n                <div className=\"text-lg opacity-90\">Partnerships Formed</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Future Vision */}\n          <div className=\"mt-20 text-center\">\n            <h2 className=\"font-serif text-3xl font-bold text-primary mb-6\">Looking Forward</h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed mb-8\">\n              As we continue our journey, we remain committed to our mission of amplifying voices and \n              creating opportunities. Our vision for the future includes expanding to reach even more \n              communities, developing innovative programs, and building lasting partnerships that create \n              sustainable change.\n            </p>\n            <a \n              href=\"/programs/education\" \n              className=\"bg-primary text-white px-8 py-3 rounded-full font-semibold hover:bg-primary/90 transition-colors inline-block\"\n              data-testid=\"button-learn-programs\"\n            >\n              Learn About Our Programs\n            </a>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":9775},"client/src/pages/about/team.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Linkedin, Twitter, Mail } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Layout from \"@/components/Layout\";\nimport type { TeamMember } from \"@shared/schema\";\n\nexport default function TeamPage() {\n  const { data: team, isLoading } = useQuery<TeamMember[]>({\n    queryKey: [\"/api/team\"],\n  });\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-6\">Our Team</h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n              Meet the dedicated professionals and volunteers who work tirelessly to empower women and girls across Kenya. \n              Our diverse team brings together expertise in education, advocacy, community development, and social impact.\n            </p>\n          </div>\n\n          {/* Loading State */}\n          {isLoading && (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"bg-white rounded-2xl shadow-lg overflow-hidden\">\n                  <Skeleton className=\"w-full h-64\" />\n                  <div className=\"p-6\">\n                    <Skeleton className=\"h-6 w-32 mb-2\" />\n                    <Skeleton className=\"h-4 w-24 mb-3\" />\n                    <Skeleton className=\"h-4 w-full mb-2\" />\n                    <Skeleton className=\"h-4 w-3/4 mb-4\" />\n                    <div className=\"flex space-x-3\">\n                      <Skeleton className=\"h-5 w-5\" />\n                      <Skeleton className=\"h-5 w-5\" />\n                      <Skeleton className=\"h-5 w-5\" />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Team Members Grid */}\n          {team && team.length > 0 && (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {team.map((member) => (\n                <div \n                  key={member.id} \n                  className=\"bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2\"\n                  data-testid={`card-team-member-${member.id}`}\n                >\n                  {member.imageUrl && (\n                    <div className=\"h-64 overflow-hidden\">\n                      <img \n                        src={member.imageUrl} \n                        alt={`${member.name} portrait`}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  )}\n                  <div className=\"p-6\">\n                    <h3 className=\"font-serif text-xl font-bold text-primary mb-1\" data-testid={`text-name-${member.id}`}>\n                      {member.name}\n                    </h3>\n                    <p className=\"text-accent font-semibold mb-3\" data-testid={`text-role-${member.id}`}>\n                      {member.role}\n                    </p>\n                    <p className=\"text-gray-600 text-sm mb-4 leading-relaxed\" data-testid={`text-bio-${member.id}`}>\n                      {member.bio}\n                    </p>\n                    <div className=\"flex space-x-3\">\n                      {member.linkedinUrl && (\n                        <a \n                          href={member.linkedinUrl} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-gray-400 hover:text-primary transition-colors\"\n                          data-testid={`link-linkedin-${member.id}`}\n                        >\n                          <Linkedin className=\"h-5 w-5\" />\n                        </a>\n                      )}\n                      {member.twitterUrl && (\n                        <a \n                          href={member.twitterUrl} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-gray-400 hover:text-primary transition-colors\"\n                          data-testid={`link-twitter-${member.id}`}\n                        >\n                          <Twitter className=\"h-5 w-5\" />\n                        </a>\n                      )}\n                      {member.email && (\n                        <a \n                          href={`mailto:${member.email}`}\n                          className=\"text-gray-400 hover:text-primary transition-colors\"\n                          data-testid={`link-email-${member.id}`}\n                        >\n                          <Mail className=\"h-5 w-5\" />\n                        </a>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Empty State */}\n          {team && team.length === 0 && !isLoading && (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-2xl font-semibold text-gray-600 mb-4\">No Team Members Found</h3>\n              <p className=\"text-gray-500\">Our team information will be updated soon.</p>\n            </div>\n          )}\n\n          {/* Join Our Team Section */}\n          <div className=\"mt-20 bg-gradient-to-br from-primary to-secondary rounded-2xl p-12 text-white text-center\">\n            <h2 className=\"font-serif text-3xl font-bold mb-4\">Join Our Mission</h2>\n            <p className=\"text-xl opacity-90 mb-8 max-w-2xl mx-auto\">\n              Are you passionate about empowering women and girls? We're always looking for dedicated individuals \n              to join our team and make a lasting impact in communities across Kenya.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <a \n                href=\"/contact\" \n                className=\"bg-white text-primary px-8 py-3 rounded-full font-semibold hover:bg-gray-100 transition-colors\"\n                data-testid=\"button-join-team\"\n              >\n                Get In Touch\n              </a>\n              <a \n                href=\"/volunteer\" \n                className=\"border-2 border-white text-white px-8 py-3 rounded-full font-semibold hover:bg-white hover:text-primary transition-colors\"\n                data-testid=\"button-volunteer\"\n              >\n                Volunteer With Us\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":6742},"client/src/pages/admin/blog-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Eye, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport type { BlogPost, InsertBlogPost } from \"@shared/schema\";\n\nexport default function BlogManagement() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPost, setEditingPost] = useState<BlogPost | null>(null);\n  const [formData, setFormData] = useState<InsertBlogPost>({\n    title: \"\",\n    slug: \"\",\n    excerpt: \"\",\n    content: \"\",\n    imageUrl: \"\",\n    authorId: \"\",\n    isPublished: false,\n    publishedAt: null,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: posts, isLoading } = useQuery<BlogPost[]>({\n    queryKey: [\"/api/admin/blog\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertBlogPost) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/blog\", {\n        ...data,\n        publishedAt: data.isPublished ? new Date().toISOString() : null,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/blog\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog\"] });\n      toast({ title: \"Blog post created successfully\" });\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to create blog post\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertBlogPost> }) => {\n      const res = await apiRequest(\"PUT\", `/api/admin/blog/${id}`, {\n        ...data,\n        publishedAt: data.isPublished ? new Date().toISOString() : null,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/blog\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog\"] });\n      toast({ title: \"Blog post updated successfully\" });\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to update blog post\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/blog/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/blog\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog\"] });\n      toast({ title: \"Blog post deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to delete blog post\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const generateSlug = (title: string) => {\n    return title\n      .toLowerCase()\n      .replace(/[^a-z0-9 -]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .trim();\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      slug: \"\",\n      excerpt: \"\",\n      content: \"\",\n      imageUrl: \"\",\n      authorId: \"\",\n      isPublished: false,\n      publishedAt: null,\n    });\n    setEditingPost(null);\n    setIsDialogOpen(false);\n  };\n\n  const handleEdit = (post: BlogPost) => {\n    setEditingPost(post);\n    setFormData({\n      title: post.title,\n      slug: post.slug,\n      excerpt: post.excerpt,\n      content: post.content,\n      imageUrl: post.imageUrl || \"\",\n      authorId: post.authorId || \"\",\n      isPublished: post.isPublished ?? false,\n      publishedAt: post.publishedAt,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingPost) {\n      updateMutation.mutate({ id: editingPost.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this blog post?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleTitleChange = (title: string) => {\n    setFormData({\n      ...formData,\n      title,\n      slug: generateSlug(title),\n    });\n  };\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"font-serif text-4xl font-bold text-primary mb-2\">Blog Management</h1>\n              <p className=\"text-gray-600\">Create and manage blog posts and articles</p>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-post\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Blog Post\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingPost ? \"Edit Blog Post\" : \"Create Blog Post\"}\n                  </DialogTitle>\n                  <DialogDescription>\n                    {editingPost ? \"Update blog post content\" : \"Create a new blog post for the website\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"title\">Title *</Label>\n                    <Input\n                      id=\"title\"\n                      value={formData.title}\n                      onChange={(e) => handleTitleChange(e.target.value)}\n                      required\n                      data-testid=\"input-title\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"slug\">Slug *</Label>\n                    <Input\n                      id=\"slug\"\n                      value={formData.slug}\n                      onChange={(e) => setFormData({ ...formData, slug: e.target.value })}\n                      required\n                      data-testid=\"input-slug\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"excerpt\">Excerpt *</Label>\n                    <Textarea\n                      id=\"excerpt\"\n                      value={formData.excerpt}\n                      onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}\n                      rows={2}\n                      required\n                      data-testid=\"textarea-excerpt\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"content\">Content *</Label>\n                    <Textarea\n                      id=\"content\"\n                      value={formData.content}\n                      onChange={(e) => setFormData({ ...formData, content: e.target.value })}\n                      rows={8}\n                      required\n                      data-testid=\"textarea-content\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"imageUrl\">Featured Image URL</Label>\n                    <Input\n                      id=\"imageUrl\"\n                      type=\"url\"\n                      value={formData.imageUrl}\n                      onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                      data-testid=\"input-image-url\"\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"isPublished\"\n                      checked={formData.isPublished}\n                      onCheckedChange={(checked) => setFormData({ ...formData, isPublished: checked })}\n                      data-testid=\"switch-published\"\n                    />\n                    <Label htmlFor=\"isPublished\">Publish immediately</Label>\n                  </div>\n                  <div className=\"flex space-x-2 pt-4\">\n                    <Button\n                      type=\"submit\"\n                      disabled={createMutation.isPending || updateMutation.isPending}\n                      data-testid=\"button-save-post\"\n                    >\n                      {editingPost ? \"Update\" : \"Create\"} Post\n                    </Button>\n                    <Button type=\"button\" variant=\"outline\" onClick={resetForm} data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Blog Posts List */}\n          <div className=\"space-y-4\">\n            {posts?.map((post) => (\n              <Card key={post.id} className=\"p-6\" data-testid={`card-post-${post.id}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <h3 className=\"text-xl font-semibold text-primary\">{post.title}</h3>\n                      <span className={`px-2 py-1 text-xs rounded-full ${\n                        post.isPublished \n                          ? 'bg-green-100 text-green-800' \n                          : 'bg-yellow-100 text-yellow-800'\n                      }`}>\n                        {post.isPublished ? 'Published' : 'Draft'}\n                      </span>\n                    </div>\n                    <p className=\"text-gray-600 mb-2\">{post.excerpt}</p>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                      <span className=\"flex items-center\">\n                        <Calendar className=\"h-4 w-4 mr-1\" />\n                        {new Date(post.createdAt).toLocaleDateString()}\n                      </span>\n                      {post.publishedAt && (\n                        <span>Published: {new Date(post.publishedAt).toLocaleDateString()}</span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2 ml-4\">\n                    {post.isPublished && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(`/community/blog/${post.slug}`, '_blank')}\n                        data-testid={`button-view-${post.id}`}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(post)}\n                      data-testid={`button-edit-${post.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleDelete(post.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-${post.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          {!posts?.length && !isLoading && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500 text-lg\">No blog posts found. Create your first post!</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":12364},"client/src/pages/admin/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, FileText, Calendar, Heart, MessageSquare, Image } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Layout from \"@/components/Layout\";\nimport type { TeamMember, BlogPost, Event, Donation, ContactMessage, GalleryImage } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { data: team } = useQuery<TeamMember[]>({ queryKey: [\"/api/admin/team\"] });\n  const { data: blog } = useQuery<BlogPost[]>({ queryKey: [\"/api/admin/blog\"] });\n  const { data: events } = useQuery<Event[]>({ queryKey: [\"/api/admin/events\"] });\n  const { data: donations } = useQuery<Donation[]>({ queryKey: [\"/api/admin/donations\"] });\n  const { data: messages } = useQuery<ContactMessage[]>({ queryKey: [\"/api/admin/messages\"] });\n  const { data: gallery } = useQuery<GalleryImage[]>({ queryKey: [\"/api/admin/gallery\"] });\n\n  const stats = [\n    {\n      title: \"Team Members\",\n      value: team?.length || 0,\n      icon: Users,\n      link: \"/admin/team\",\n      description: \"Active team members\"\n    },\n    {\n      title: \"Blog Posts\",\n      value: blog?.length || 0,\n      icon: FileText,\n      link: \"/admin/blog\",\n      description: \"Published and draft posts\"\n    },\n    {\n      title: \"Events\",\n      value: events?.length || 0,\n      icon: Calendar,\n      link: \"/admin/events\",\n      description: \"Upcoming and past events\"\n    },\n    {\n      title: \"Donations\",\n      value: donations?.length || 0,\n      icon: Heart,\n      link: \"/admin/donations\",\n      description: \"Total donations received\"\n    },\n    {\n      title: \"Messages\",\n      value: messages?.filter(m => !m.isRead).length || 0,\n      icon: MessageSquare,\n      link: \"/admin/messages\",\n      description: \"Unread contact messages\"\n    },\n    {\n      title: \"Gallery Images\",\n      value: gallery?.length || 0,\n      icon: Image,\n      link: \"/admin/gallery\",\n      description: \"Photos in gallery\"\n    },\n  ];\n\n  const totalDonations = donations?.reduce((sum, donation) => {\n    return sum + parseFloat(donation.amount);\n  }, 0) || 0;\n\n  const recentMessages = messages?.filter(m => !m.isRead).slice(0, 5) || [];\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"font-serif text-4xl font-bold text-primary mb-2\">Admin Dashboard</h1>\n            <p className=\"text-gray-600\">Manage your VOH-CBO website content and track impact</p>\n          </div>\n\n          {/* Stats Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n            {stats.map((stat) => (\n              <Card key={stat.title} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-${stat.title.toLowerCase().replace(' ', '-')}`}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">\n                    {stat.title}\n                  </CardTitle>\n                  <stat.icon className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\">{stat.value}</div>\n                  <p className=\"text-xs text-muted-foreground\">{stat.description}</p>\n                  <Link href={stat.link} className=\"mt-2 inline-block\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid={`button-manage-${stat.title.toLowerCase().replace(' ', '-')}`}>\n                      Manage\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Donation Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Heart className=\"h-5 w-5 text-accent\" />\n                  <span>Donation Summary</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-total-donations\">\n                  ${totalDonations.toFixed(2)}\n                </div>\n                <p className=\"text-sm text-gray-600 mb-4\">Total donations received</p>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Completed</span>\n                    <span className=\"text-sm font-medium\">\n                      {donations?.filter(d => d.status === 'completed').length || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Pending</span>\n                    <span className=\"text-sm font-medium\">\n                      {donations?.filter(d => d.status === 'pending').length || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Recurring</span>\n                    <span className=\"text-sm font-medium\">\n                      {donations?.filter(d => d.isRecurring).length || 0}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Messages */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageSquare className=\"h-5 w-5 text-accent\" />\n                  <span>Recent Messages</span>\n                </CardTitle>\n                <CardDescription>Unread contact form submissions</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {recentMessages.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recentMessages.map((message) => (\n                      <div key={message.id} className=\"border-l-4 border-accent pl-4 py-2\" data-testid={`message-${message.id}`}>\n                        <h4 className=\"font-semibold text-sm\">\n                          {message.firstName} {message.lastName}\n                        </h4>\n                        <p className=\"text-xs text-gray-600 mb-1\">{message.email}</p>\n                        <p className=\"text-sm text-gray-700 line-clamp-2\">{message.message}</p>\n                        <span className=\"text-xs text-gray-500\">\n                          {message.inquiryType} • {new Date(message.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    ))}\n                    <Link href=\"/admin/messages\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-view-all-messages\">\n                        View All Messages\n                      </Button>\n                    </Link>\n                  </div>\n                ) : (\n                  <p className=\"text-gray-500 text-center py-4\">No unread messages</p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n              <CardDescription>Common administrative tasks</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Link href=\"/admin/team\">\n                  <Button variant=\"outline\" className=\"w-full h-20 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-add-team-member\">\n                    <Users className=\"h-6 w-6\" />\n                    <span className=\"text-sm\">Add Team Member</span>\n                  </Button>\n                </Link>\n                <Link href=\"/admin/blog\">\n                  <Button variant=\"outline\" className=\"w-full h-20 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-create-blog-post\">\n                    <FileText className=\"h-6 w-6\" />\n                    <span className=\"text-sm\">Create Blog Post</span>\n                  </Button>\n                </Link>\n                <Link href=\"/admin/events\">\n                  <Button variant=\"outline\" className=\"w-full h-20 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-add-event\">\n                    <Calendar className=\"h-6 w-6\" />\n                    <span className=\"text-sm\">Add Event</span>\n                  </Button>\n                </Link>\n                <Link href=\"/admin/gallery\">\n                  <Button variant=\"outline\" className=\"w-full h-20 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-upload-images\">\n                    <Image className=\"h-6 w-6\" />\n                    <span className=\"text-sm\">Upload Images</span>\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":9358},"client/src/pages/admin/events-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Calendar, MapPin, Users } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport type { Event, InsertEvent } from \"@shared/schema\";\n\nexport default function EventsManagement() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n  const [formData, setFormData] = useState<InsertEvent>({\n    title: \"\",\n    description: \"\",\n    imageUrl: \"\",\n    location: \"\",\n    startDate: new Date(),\n    endDate: null,\n    isPublic: true,\n    maxAttendees: null,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: events, isLoading } = useQuery<Event[]>({\n    queryKey: [\"/api/admin/events\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertEvent) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/events\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({ title: \"Event created successfully\" });\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to create event\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertEvent> }) => {\n      const res = await apiRequest(\"PUT\", `/api/admin/events/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({ title: \"Event updated successfully\" });\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to update event\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/events/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({ title: \"Event deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to delete event\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      location: \"\",\n      startDate: new Date(),\n      endDate: null,\n      isPublic: true,\n      maxAttendees: null,\n    });\n    setEditingEvent(null);\n    setIsDialogOpen(false);\n  };\n\n  const handleEdit = (event: Event) => {\n    setEditingEvent(event);\n    setFormData({\n      title: event.title,\n      description: event.description,\n      imageUrl: event.imageUrl || \"\",\n      location: event.location || \"\",\n      startDate: new Date(event.startDate),\n      endDate: event.endDate ? new Date(event.endDate) : null,\n      isPublic: event.isPublic ?? true,\n      maxAttendees: event.maxAttendees,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingEvent) {\n      updateMutation.mutate({ id: editingEvent.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this event?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const formatDateTime = (date: Date) => {\n    return date.toISOString().slice(0, 16);\n  };\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"font-serif text-4xl font-bold text-primary mb-2\">Events Management</h1>\n              <p className=\"text-gray-600\">Create and manage community events</p>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-event\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Event\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingEvent ? \"Edit Event\" : \"Create Event\"}\n                  </DialogTitle>\n                  <DialogDescription>\n                    {editingEvent ? \"Update event details\" : \"Create a new community event\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"title\">Event Title *</Label>\n                    <Input\n                      id=\"title\"\n                      value={formData.title}\n                      onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                      required\n                      data-testid=\"input-title\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"description\">Description *</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={formData.description}\n                      onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                      rows={3}\n                      required\n                      data-testid=\"textarea-description\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"location\">Location</Label>\n                    <Input\n                      id=\"location\"\n                      value={formData.location}\n                      onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n                      data-testid=\"input-location\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"imageUrl\">Event Image URL</Label>\n                    <Input\n                      id=\"imageUrl\"\n                      type=\"url\"\n                      value={formData.imageUrl}\n                      onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                      data-testid=\"input-image-url\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"startDate\">Start Date & Time *</Label>\n                    <Input\n                      id=\"startDate\"\n                      type=\"datetime-local\"\n                      value={formatDateTime(formData.startDate)}\n                      onChange={(e) => setFormData({ ...formData, startDate: new Date(e.target.value) })}\n                      required\n                      data-testid=\"input-start-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"endDate\">End Date & Time</Label>\n                    <Input\n                      id=\"endDate\"\n                      type=\"datetime-local\"\n                      value={formData.endDate ? formatDateTime(formData.endDate) : \"\"}\n                      onChange={(e) => setFormData({ \n                        ...formData, \n                        endDate: e.target.value ? new Date(e.target.value) : null \n                      })}\n                      data-testid=\"input-end-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"maxAttendees\">Max Attendees</Label>\n                    <Input\n                      id=\"maxAttendees\"\n                      type=\"number\"\n                      min=\"1\"\n                      value={formData.maxAttendees || \"\"}\n                      onChange={(e) => setFormData({ \n                        ...formData, \n                        maxAttendees: e.target.value ? parseInt(e.target.value) : null \n                      })}\n                      data-testid=\"input-max-attendees\"\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"isPublic\"\n                      checked={formData.isPublic}\n                      onCheckedChange={(checked) => setFormData({ ...formData, isPublic: checked })}\n                      data-testid=\"switch-public\"\n                    />\n                    <Label htmlFor=\"isPublic\">Public event (visible to visitors)</Label>\n                  </div>\n                  <div className=\"flex space-x-2 pt-4\">\n                    <Button\n                      type=\"submit\"\n                      disabled={createMutation.isPending || updateMutation.isPending}\n                      data-testid=\"button-save-event\"\n                    >\n                      {editingEvent ? \"Update\" : \"Create\"} Event\n                    </Button>\n                    <Button type=\"button\" variant=\"outline\" onClick={resetForm} data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Events Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {events?.map((event) => (\n              <Card key={event.id} className=\"overflow-hidden\" data-testid={`card-event-${event.id}`}>\n                {event.imageUrl && (\n                  <div className=\"h-48 overflow-hidden\">\n                    <img\n                      src={event.imageUrl}\n                      alt={event.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                )}\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <CardTitle className=\"text-lg\">{event.title}</CardTitle>\n                    <span className={`px-2 py-1 text-xs rounded-full ${\n                      event.isPublic \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-gray-100 text-gray-800'\n                    }`}>\n                      {event.isPublic ? 'Public' : 'Private'}\n                    </span>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\">{event.description}</p>\n                  \n                  <div className=\"space-y-2 text-sm text-gray-500 mb-4\">\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      <span>{new Date(event.startDate).toLocaleDateString()}</span>\n                    </div>\n                    {event.location && (\n                      <div className=\"flex items-center\">\n                        <MapPin className=\"h-4 w-4 mr-2\" />\n                        <span>{event.location}</span>\n                      </div>\n                    )}\n                    {event.maxAttendees && (\n                      <div className=\"flex items-center\">\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        <span>Max {event.maxAttendees} attendees</span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(event)}\n                      data-testid={`button-edit-${event.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleDelete(event.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-${event.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {!events?.length && !isLoading && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500 text-lg\">No events found. Create your first event!</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":13548},"client/src/pages/admin/team-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Linkedin, Twitter, Mail } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport type { TeamMember, InsertTeamMember } from \"@shared/schema\";\n\nexport default function TeamManagement() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingMember, setEditingMember] = useState<TeamMember | null>(null);\n  const [formData, setFormData] = useState<InsertTeamMember>({\n    name: \"\",\n    role: \"\",\n    bio: \"\",\n    imageUrl: \"\",\n    email: \"\",\n    linkedinUrl: \"\",\n    twitterUrl: \"\",\n    isActive: true,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: team, isLoading } = useQuery<TeamMember[]>({\n    queryKey: [\"/api/admin/team\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertTeamMember) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/team\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/team\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/team\"] });\n      toast({ title: \"Team member added successfully\" });\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to add team member\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertTeamMember> }) => {\n      const res = await apiRequest(\"PUT\", `/api/admin/team/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/team\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/team\"] });\n      toast({ title: \"Team member updated successfully\" });\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to update team member\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/team/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/team\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/team\"] });\n      toast({ title: \"Team member deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to delete team member\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      role: \"\",\n      bio: \"\",\n      imageUrl: \"\",\n      email: \"\",\n      linkedinUrl: \"\",\n      twitterUrl: \"\",\n      isActive: true,\n    });\n    setEditingMember(null);\n    setIsDialogOpen(false);\n  };\n\n  const handleEdit = (member: TeamMember) => {\n    setEditingMember(member);\n    setFormData({\n      name: member.name,\n      role: member.role,\n      bio: member.bio,\n      imageUrl: member.imageUrl || \"\",\n      email: member.email || \"\",\n      linkedinUrl: member.linkedinUrl || \"\",\n      twitterUrl: member.twitterUrl || \"\",\n      isActive: member.isActive ?? true,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingMember) {\n      updateMutation.mutate({ id: editingMember.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this team member?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"font-serif text-4xl font-bold text-primary mb-2\">Team Management</h1>\n              <p className=\"text-gray-600\">Manage team member profiles and information</p>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-member\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Team Member\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingMember ? \"Edit Team Member\" : \"Add Team Member\"}\n                  </DialogTitle>\n                  <DialogDescription>\n                    {editingMember ? \"Update team member information\" : \"Add a new team member to the website\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Name *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                      required\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"role\">Role *</Label>\n                    <Input\n                      id=\"role\"\n                      value={formData.role}\n                      onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n                      required\n                      data-testid=\"input-role\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"bio\">Bio *</Label>\n                    <Textarea\n                      id=\"bio\"\n                      value={formData.bio}\n                      onChange={(e) => setFormData({ ...formData, bio: e.target.value })}\n                      rows={3}\n                      required\n                      data-testid=\"textarea-bio\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"imageUrl\">Image URL</Label>\n                    <Input\n                      id=\"imageUrl\"\n                      type=\"url\"\n                      value={formData.imageUrl}\n                      onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                      data-testid=\"input-image-url\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"linkedinUrl\">LinkedIn URL</Label>\n                    <Input\n                      id=\"linkedinUrl\"\n                      type=\"url\"\n                      value={formData.linkedinUrl}\n                      onChange={(e) => setFormData({ ...formData, linkedinUrl: e.target.value })}\n                      data-testid=\"input-linkedin\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"twitterUrl\">Twitter URL</Label>\n                    <Input\n                      id=\"twitterUrl\"\n                      type=\"url\"\n                      value={formData.twitterUrl}\n                      onChange={(e) => setFormData({ ...formData, twitterUrl: e.target.value })}\n                      data-testid=\"input-twitter\"\n                    />\n                  </div>\n                  <div className=\"flex space-x-2 pt-4\">\n                    <Button\n                      type=\"submit\"\n                      disabled={createMutation.isPending || updateMutation.isPending}\n                      data-testid=\"button-save-member\"\n                    >\n                      {editingMember ? \"Update\" : \"Add\"} Member\n                    </Button>\n                    <Button type=\"button\" variant=\"outline\" onClick={resetForm} data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Team Members Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {team?.map((member) => (\n              <Card key={member.id} className=\"overflow-hidden\" data-testid={`card-member-${member.id}`}>\n                {member.imageUrl && (\n                  <div className=\"h-48 overflow-hidden\">\n                    <img\n                      src={member.imageUrl}\n                      alt={member.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                )}\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{member.name}</CardTitle>\n                  <CardDescription className=\"text-accent font-semibold\">\n                    {member.role}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600 mb-4 line-clamp-3\">{member.bio}</p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex space-x-2\">\n                      {member.linkedinUrl && (\n                        <a href={member.linkedinUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Linkedin className=\"h-4 w-4 text-gray-400 hover:text-primary\" />\n                        </a>\n                      )}\n                      {member.twitterUrl && (\n                        <a href={member.twitterUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Twitter className=\"h-4 w-4 text-gray-400 hover:text-primary\" />\n                        </a>\n                      )}\n                      {member.email && (\n                        <a href={`mailto:${member.email}`}>\n                          <Mail className=\"h-4 w-4 text-gray-400 hover:text-primary\" />\n                        </a>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleEdit(member)}\n                        data-testid={`button-edit-${member.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDelete(member.id)}\n                        disabled={deleteMutation.isPending}\n                        data-testid={`button-delete-${member.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-2\">\n                    <span className={`inline-block px-2 py-1 text-xs rounded-full ${\n                      member.isActive \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-gray-100 text-gray-800'\n                    }`}>\n                      {member.isActive ? 'Active' : 'Inactive'}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {!team?.length && !isLoading && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500 text-lg\">No team members found. Add your first team member!</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":12793},"client/src/pages/community/blog.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, User, ArrowRight, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Layout from \"@/components/Layout\";\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function BlogPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n  const { data: posts, isLoading, error } = useQuery<BlogPost[]>({\n    queryKey: [\"/api/blog\"],\n  });\n\n  const filteredPosts = posts?.filter(post => \n    post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    post.excerpt.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const featuredPost = filteredPosts[0];\n  const otherPosts = filteredPosts.slice(1);\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-6\">Stories & Features</h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n              Discover inspiring stories, program updates, and insights from our community. \n              Read about the impact we're making together and the voices we're amplifying across Kenya.\n            </p>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"max-w-md mx-auto mb-12\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search articles...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-blog\"\n              />\n            </div>\n          </div>\n\n          {/* Error State */}\n          {error && (\n            <div className=\"text-center py-12\">\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 max-w-md mx-auto\">\n                <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Unable to Load Articles</h3>\n                <p className=\"text-red-600\">\n                  We're having trouble loading our blog posts. Please try again later or contact us if the problem persists.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Loading State */}\n          {isLoading && (\n            <div className=\"space-y-8\">\n              {/* Featured post skeleton */}\n              <Card className=\"overflow-hidden\">\n                <div className=\"md:flex\">\n                  <Skeleton className=\"md:w-1/2 h-64 md:h-80\" />\n                  <div className=\"md:w-1/2 p-8\">\n                    <Skeleton className=\"h-8 w-48 mb-4\" />\n                    <Skeleton className=\"h-4 w-full mb-2\" />\n                    <Skeleton className=\"h-4 w-3/4 mb-6\" />\n                    <Skeleton className=\"h-10 w-32\" />\n                  </div>\n                </div>\n              </Card>\n              \n              {/* Other posts skeleton */}\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"overflow-hidden\">\n                    <Skeleton className=\"h-48 w-full\" />\n                    <div className=\"p-6\">\n                      <Skeleton className=\"h-6 w-32 mb-3\" />\n                      <Skeleton className=\"h-4 w-full mb-2\" />\n                      <Skeleton className=\"h-4 w-3/4 mb-4\" />\n                      <Skeleton className=\"h-8 w-24\" />\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Blog Content */}\n          {!isLoading && !error && (\n            <>\n              {/* Featured Post */}\n              {featuredPost && (\n                <div className=\"mb-16\">\n                  <h2 className=\"font-serif text-2xl font-bold text-primary mb-6\">Featured Story</h2>\n                  <Card className=\"overflow-hidden hover:shadow-xl transition-shadow duration-300\" data-testid=\"card-featured-post\">\n                    <div className=\"md:flex\">\n                      {featuredPost.imageUrl && (\n                        <div className=\"md:w-1/2 h-64 md:h-80 overflow-hidden\">\n                          <img \n                            src={featuredPost.imageUrl} \n                            alt={featuredPost.title}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                      )}\n                      <div className={`${featuredPost.imageUrl ? 'md:w-1/2' : 'w-full'} p-8`}>\n                        <div className=\"flex items-center text-sm text-gray-500 mb-4\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          <span>{formatDate(featuredPost.publishedAt || featuredPost.createdAt)}</span>\n                          <User className=\"h-4 w-4 ml-4 mr-2\" />\n                          <span>VOH-CBO Team</span>\n                        </div>\n                        <h3 className=\"font-serif text-2xl md:text-3xl font-bold text-primary mb-4\">\n                          {featuredPost.title}\n                        </h3>\n                        <p className=\"text-gray-600 mb-6 leading-relaxed\">\n                          {featuredPost.excerpt}\n                        </p>\n                        <Link href={`/community/blog/${featuredPost.slug}`}>\n                          <Button className=\"bg-accent hover:bg-orange-600\" data-testid={`button-read-featured-${featuredPost.id}`}>\n                            Read Full Story\n                            <ArrowRight className=\"h-4 w-4 ml-2\" />\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </Card>\n                </div>\n              )}\n\n              {/* Other Posts */}\n              {otherPosts.length > 0 && (\n                <div className=\"mb-16\">\n                  <h2 className=\"font-serif text-2xl font-bold text-primary mb-6\">\n                    {featuredPost ? 'More Stories' : 'Latest Stories'}\n                  </h2>\n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {otherPosts.map((post) => (\n                      <Card key={post.id} className=\"overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\" data-testid={`card-blog-post-${post.id}`}>\n                        {post.imageUrl && (\n                          <div className=\"h-48 overflow-hidden\">\n                            <img \n                              src={post.imageUrl} \n                              alt={post.title}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          </div>\n                        )}\n                        <CardHeader>\n                          <div className=\"flex items-center text-sm text-gray-500 mb-2\">\n                            <Calendar className=\"h-4 w-4 mr-2\" />\n                            <span>{formatDate(post.publishedAt || post.createdAt)}</span>\n                          </div>\n                          <CardTitle className=\"text-lg text-primary line-clamp-2\">\n                            {post.title}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <p className=\"text-gray-600 mb-4 line-clamp-3\">\n                            {post.excerpt}\n                          </p>\n                          <Link href={`/community/blog/${post.slug}`}>\n                            <Button variant=\"outline\" className=\"w-full\" data-testid={`button-read-more-${post.id}`}>\n                              Read More\n                              <ArrowRight className=\"h-4 w-4 ml-2\" />\n                            </Button>\n                          </Link>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* No Results */}\n              {searchTerm && filteredPosts.length === 0 && posts && posts.length > 0 && (\n                <div className=\"text-center py-16\">\n                  <Search className=\"h-24 w-24 text-gray-300 mx-auto mb-6\" />\n                  <h3 className=\"text-2xl font-semibold text-gray-600 mb-4\">No Results Found</h3>\n                  <p className=\"text-gray-500 mb-8 max-w-md mx-auto\">\n                    We couldn't find any articles matching \"{searchTerm}\". Try different keywords or browse all our stories.\n                  </p>\n                  <Button \n                    onClick={() => setSearchTerm(\"\")} \n                    className=\"bg-primary hover:bg-primary/90\"\n                    data-testid=\"button-clear-search\"\n                  >\n                    Clear Search\n                  </Button>\n                </div>\n              )}\n\n              {/* Empty State */}\n              {posts && posts.length === 0 && (\n                <div className=\"text-center py-16\">\n                  <div className=\"w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <User className=\"h-12 w-12 text-gray-400\" />\n                  </div>\n                  <h3 className=\"text-2xl font-semibold text-gray-600 mb-4\">No Stories Yet</h3>\n                  <p className=\"text-gray-500 mb-8 max-w-md mx-auto\">\n                    We're working on bringing you inspiring stories and updates from our community. \n                    Check back soon for our latest features and impact stories.\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                    <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-contact-blog\">\n                      Contact Us\n                    </Button>\n                    <Button variant=\"outline\" data-testid=\"button-newsletter-blog\">\n                      Subscribe for Updates\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n\n          {/* Call to Action */}\n          {posts && posts.length > 0 && (\n            <div className=\"bg-gradient-to-br from-secondary/10 to-accent/10 rounded-2xl p-12 text-center\">\n              <h2 className=\"font-serif text-3xl font-bold text-primary mb-4\">Share Your Story</h2>\n              <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n                Have an inspiring story or experience with VOH-CBO? We'd love to hear from you and \n                share your journey with our community.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button size=\"lg\" className=\"bg-accent hover:bg-orange-600\" data-testid=\"button-share-story\">\n                  Share Your Story\n                </Button>\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\"\n                  data-testid=\"button-newsletter-signup-blog\"\n                >\n                  Subscribe to Newsletter\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":12056},"client/src/pages/community/events.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, MapPin, Users, Clock, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Layout from \"@/components/Layout\";\nimport type { Event } from \"@shared/schema\";\n\nexport default function EventsPage() {\n  const { data: events, isLoading, error } = useQuery<Event[]>({\n    queryKey: [\"/api/events\"],\n  });\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const isUpcoming = (dateString: string) => {\n    return new Date(dateString) > new Date();\n  };\n\n  const upcomingEvents = events?.filter(event => isUpcoming(event.startDate)) || [];\n  const pastEvents = events?.filter(event => !isUpcoming(event.startDate)) || [];\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-6\">Community Events</h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n              Join us for meaningful events that bring our community together, celebrate achievements, \n              and create opportunities for learning, networking, and empowerment.\n            </p>\n          </div>\n\n          {/* Error State */}\n          {error && (\n            <div className=\"text-center py-12\">\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 max-w-md mx-auto\">\n                <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Unable to Load Events</h3>\n                <p className=\"text-red-600\">\n                  We're having trouble loading our events. Please try again later or contact us if the problem persists.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Loading State */}\n          {isLoading && (\n            <div className=\"space-y-8\">\n              <div>\n                <Skeleton className=\"h-8 w-48 mb-6\" />\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {[...Array(6)].map((_, i) => (\n                    <Card key={i} className=\"overflow-hidden\">\n                      <Skeleton className=\"h-48 w-full\" />\n                      <div className=\"p-6\">\n                        <Skeleton className=\"h-6 w-32 mb-3\" />\n                        <Skeleton className=\"h-4 w-full mb-2\" />\n                        <Skeleton className=\"h-4 w-3/4 mb-4\" />\n                        <div className=\"space-y-2\">\n                          <Skeleton className=\"h-4 w-28\" />\n                          <Skeleton className=\"h-4 w-32\" />\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Events Content */}\n          {!isLoading && !error && (\n            <>\n              {/* Upcoming Events */}\n              {upcomingEvents.length > 0 && (\n                <div className=\"mb-16\">\n                  <h2 className=\"font-serif text-3xl font-bold text-primary mb-8\">Upcoming Events</h2>\n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {upcomingEvents.map((event) => (\n                      <Card key={event.id} className=\"overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\" data-testid={`card-upcoming-event-${event.id}`}>\n                        {event.imageUrl && (\n                          <div className=\"h-48 overflow-hidden\">\n                            <img \n                              src={event.imageUrl} \n                              alt={event.title}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          </div>\n                        )}\n                        <CardHeader>\n                          <div className=\"flex items-start justify-between\">\n                            <CardTitle className=\"text-lg text-primary pr-2\">{event.title}</CardTitle>\n                            <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                              Upcoming\n                            </Badge>\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          <p className=\"text-gray-600 mb-4 line-clamp-2\">{event.description}</p>\n                          \n                          <div className=\"space-y-2 text-sm text-gray-500 mb-4\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-2 text-accent\" />\n                              <span>{formatDate(event.startDate)}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Clock className=\"h-4 w-4 mr-2 text-accent\" />\n                              <span>{formatTime(event.startDate)}</span>\n                            </div>\n                            {event.location && (\n                              <div className=\"flex items-center\">\n                                <MapPin className=\"h-4 w-4 mr-2 text-accent\" />\n                                <span>{event.location}</span>\n                              </div>\n                            )}\n                            {event.maxAttendees && (\n                              <div className=\"flex items-center\">\n                                <Users className=\"h-4 w-4 mr-2 text-accent\" />\n                                <span>Max {event.maxAttendees} attendees</span>\n                              </div>\n                            )}\n                          </div>\n                          \n                          <Button className=\"w-full bg-accent hover:bg-orange-600\" data-testid={`button-register-${event.id}`}>\n                            Register Interest\n                            <ChevronRight className=\"h-4 w-4 ml-2\" />\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Past Events */}\n              {pastEvents.length > 0 && (\n                <div className=\"mb-16\">\n                  <h2 className=\"font-serif text-3xl font-bold text-primary mb-8\">Past Events</h2>\n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {pastEvents.slice(0, 6).map((event) => (\n                      <Card key={event.id} className=\"overflow-hidden hover:shadow-lg transition-shadow duration-300\" data-testid={`card-past-event-${event.id}`}>\n                        {event.imageUrl && (\n                          <div className=\"h-48 overflow-hidden\">\n                            <img \n                              src={event.imageUrl} \n                              alt={event.title}\n                              className=\"w-full h-full object-cover opacity-75\"\n                            />\n                          </div>\n                        )}\n                        <CardHeader>\n                          <div className=\"flex items-start justify-between\">\n                            <CardTitle className=\"text-lg text-primary pr-2\">{event.title}</CardTitle>\n                            <Badge variant=\"outline\" className=\"text-gray-500\">\n                              Past Event\n                            </Badge>\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          <p className=\"text-gray-600 mb-4 line-clamp-2\">{event.description}</p>\n                          \n                          <div className=\"space-y-2 text-sm text-gray-500\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-2 text-gray-400\" />\n                              <span>{formatDate(event.startDate)}</span>\n                            </div>\n                            {event.location && (\n                              <div className=\"flex items-center\">\n                                <MapPin className=\"h-4 w-4 mr-2 text-gray-400\" />\n                                <span>{event.location}</span>\n                              </div>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                  \n                  {pastEvents.length > 6 && (\n                    <div className=\"text-center mt-8\">\n                      <Button variant=\"outline\" data-testid=\"button-view-more-past\">\n                        View More Past Events\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Empty State */}\n              {events && events.length === 0 && (\n                <div className=\"text-center py-16\">\n                  <Calendar className=\"h-24 w-24 text-gray-300 mx-auto mb-6\" />\n                  <h3 className=\"text-2xl font-semibold text-gray-600 mb-4\">No Events Found</h3>\n                  <p className=\"text-gray-500 mb-8 max-w-md mx-auto\">\n                    We don't have any events scheduled at the moment. Check back soon for upcoming \n                    community gatherings, workshops, and celebrations.\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                    <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-contact-events\">\n                      Contact Us for Updates\n                    </Button>\n                    <Button variant=\"outline\" data-testid=\"button-newsletter-signup\">\n                      Subscribe to Newsletter\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n\n          {/* Call to Action */}\n          {events && events.length > 0 && (\n            <div className=\"bg-gradient-to-r from-primary to-secondary rounded-2xl p-12 text-white text-center\">\n              <h2 className=\"font-serif text-3xl font-bold mb-4\">Stay Connected</h2>\n              <p className=\"text-xl opacity-90 mb-8 max-w-2xl mx-auto\">\n                Don't miss out on our upcoming events! Subscribe to our newsletter to get the latest \n                updates on workshops, celebrations, and community gatherings.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button size=\"lg\" className=\"bg-white text-primary hover:bg-gray-100\" data-testid=\"button-newsletter-cta\">\n                  Subscribe to Newsletter\n                </Button>\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\" \n                  className=\"border-white text-white hover:bg-white hover:text-primary\"\n                  data-testid=\"button-contact-cta\"\n                >\n                  Contact Us\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":11921},"client/src/pages/community/shop.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ShoppingCart, Star, Heart, Package } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Layout from \"@/components/Layout\";\nimport { useState } from \"react\";\nimport type { Merchandise } from \"@shared/schema\";\n\nexport default function ShopPage() {\n  const [cart, setCart] = useState<{[key: string]: number}>({});\n  \n  const { data: merchandise, isLoading, error } = useQuery<Merchandise[]>({\n    queryKey: [\"/api/merchandise\"],\n  });\n\n  const addToCart = (itemId: string) => {\n    setCart(prev => ({\n      ...prev,\n      [itemId]: (prev[itemId] || 0) + 1\n    }));\n  };\n\n  const getCartItemCount = (itemId: string) => cart[itemId] || 0;\n  const getTotalItems = () => Object.values(cart).reduce((sum, count) => sum + count, 0);\n\n  const categories = [...new Set(merchandise?.map(item => item.category) || [])];\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-6\">VOH-CBO Shop</h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n              Support our mission while showing your commitment to empowering women and girls. \n              Every purchase helps fund our programs and creates lasting change in communities across Kenya.\n            </p>\n            \n            {/* Cart Summary */}\n            {getTotalItems() > 0 && (\n              <div className=\"bg-white rounded-lg p-4 max-w-md mx-auto mt-8 shadow-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <ShoppingCart className=\"h-5 w-5 text-accent mr-2\" />\n                    <span className=\"font-semibold\">Cart: {getTotalItems()} items</span>\n                  </div>\n                  <Button size=\"sm\" className=\"bg-accent hover:bg-orange-600\" data-testid=\"button-view-cart\">\n                    View Cart\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Error State */}\n          {error && (\n            <div className=\"text-center py-12\">\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 max-w-md mx-auto\">\n                <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Unable to Load Shop</h3>\n                <p className=\"text-red-600\">\n                  We're having trouble loading our merchandise. Please try again later or contact us if the problem persists.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Loading State */}\n          {isLoading && (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {[...Array(8)].map((_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <Skeleton className=\"h-64 w-full\" />\n                  <div className=\"p-6\">\n                    <Skeleton className=\"h-6 w-32 mb-2\" />\n                    <Skeleton className=\"h-4 w-full mb-2\" />\n                    <Skeleton className=\"h-4 w-3/4 mb-4\" />\n                    <Skeleton className=\"h-6 w-20 mb-4\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {/* Shop Content */}\n          {!isLoading && !error && (\n            <>\n              {/* Category Filter */}\n              {categories.length > 1 && (\n                <div className=\"mb-8\">\n                  <div className=\"flex flex-wrap justify-center gap-2\">\n                    <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-primary hover:text-white\">\n                      All Items\n                    </Badge>\n                    {categories.map((category) => (\n                      <Badge \n                        key={category} \n                        variant=\"outline\" \n                        className=\"cursor-pointer hover:bg-primary hover:text-white capitalize\"\n                        data-testid={`filter-${category}`}\n                      >\n                        {category}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Merchandise Grid */}\n              {merchandise && merchandise.length > 0 && (\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-16\">\n                  {merchandise.map((item) => (\n                    <Card key={item.id} className=\"overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\" data-testid={`card-product-${item.id}`}>\n                      {item.imageUrl && (\n                        <div className=\"h-64 overflow-hidden relative group\">\n                          <img \n                            src={item.imageUrl} \n                            alt={item.name}\n                            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                          />\n                          {item.inventory === 0 && (\n                            <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n                              <Badge className=\"bg-red-500 text-white\">Out of Stock</Badge>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between\">\n                          <CardTitle className=\"text-lg text-primary pr-2\">{item.name}</CardTitle>\n                          <Badge variant=\"outline\" className=\"capitalize text-xs\">\n                            {item.category}\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-gray-600 mb-4 text-sm line-clamp-2\">{item.description}</p>\n                        \n                        <div className=\"flex items-center justify-between mb-4\">\n                          <div className=\"text-2xl font-bold text-primary\">\n                            ${parseFloat(item.price).toFixed(2)}\n                          </div>\n                          <div className=\"flex items-center text-yellow-500\">\n                            <Star className=\"h-4 w-4 fill-current\" />\n                            <Star className=\"h-4 w-4 fill-current\" />\n                            <Star className=\"h-4 w-4 fill-current\" />\n                            <Star className=\"h-4 w-4 fill-current\" />\n                            <Star className=\"h-4 w-4 fill-current\" />\n                          </div>\n                        </div>\n\n                        {item.inventory !== null && item.inventory > 0 && (\n                          <p className=\"text-sm text-gray-500 mb-4\">\n                            {item.inventory} in stock\n                          </p>\n                        )}\n\n                        <div className=\"space-y-2\">\n                          {getCartItemCount(item.id) > 0 && (\n                            <div className=\"bg-green-50 border border-green-200 rounded p-2 text-center\">\n                              <span className=\"text-green-800 text-sm font-medium\">\n                                {getCartItemCount(item.id)} in cart\n                              </span>\n                            </div>\n                          )}\n                          \n                          <Button \n                            onClick={() => addToCart(item.id)}\n                            disabled={item.inventory === 0}\n                            className=\"w-full bg-accent hover:bg-orange-600 disabled:bg-gray-300\"\n                            data-testid={`button-add-to-cart-${item.id}`}\n                          >\n                            {item.inventory === 0 ? (\n                              \"Out of Stock\"\n                            ) : (\n                              <>\n                                <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                                Add to Cart\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n\n              {/* Empty State */}\n              {merchandise && merchandise.length === 0 && (\n                <div className=\"text-center py-16\">\n                  <Package className=\"h-24 w-24 text-gray-300 mx-auto mb-6\" />\n                  <h3 className=\"text-2xl font-semibold text-gray-600 mb-4\">Shop Coming Soon</h3>\n                  <p className=\"text-gray-500 mb-8 max-w-md mx-auto\">\n                    We're preparing amazing merchandise to help you support our mission. \n                    Check back soon for VOH-CBO branded items and more ways to show your support.\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                    <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-contact-shop\">\n                      Contact Us for Updates\n                    </Button>\n                    <Button variant=\"outline\" data-testid=\"button-donate-instead\">\n                      <Heart className=\"h-4 w-4 mr-2\" />\n                      Donate Instead\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n\n          {/* Impact Message */}\n          {merchandise && merchandise.length > 0 && (\n            <div className=\"bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl p-8 md:p-12 mb-16\">\n              <div className=\"text-center\">\n                <h2 className=\"font-serif text-3xl font-bold text-primary mb-4\">Your Purchase Makes a Difference</h2>\n                <p className=\"text-gray-600 leading-relaxed mb-6 max-w-2xl mx-auto\">\n                  Every item you purchase directly supports our programs and helps us continue empowering \n                  women and girls across Kenya. Your support creates lasting change in communities.\n                </p>\n                <div className=\"grid md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <Heart className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <h3 className=\"font-semibold text-primary mb-2\">Funds Programs</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Supports education, leadership training, and community initiatives\n                    </p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-secondary rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <Star className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <h3 className=\"font-semibold text-primary mb-2\">Quality Products</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Ethically sourced, high-quality merchandise you can be proud to wear\n                    </p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-success rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <Package className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <h3 className=\"font-semibold text-primary mb-2\">Spreads Awareness</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Helps share our mission and inspire others to get involved\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Call to Action */}\n          {merchandise && merchandise.length > 0 && (\n            <div className=\"bg-gradient-to-r from-primary to-secondary rounded-2xl p-12 text-white text-center\">\n              <h2 className=\"font-serif text-3xl font-bold mb-4\">More Ways to Support</h2>\n              <p className=\"text-xl opacity-90 mb-8 max-w-2xl mx-auto\">\n                Shopping is just one way to support our mission. Explore other ways to get involved \n                and make a lasting impact in communities across Kenya.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button size=\"lg\" className=\"bg-white text-primary hover:bg-gray-100\" data-testid=\"button-donate-cta\">\n                  <Heart className=\"mr-2 h-5 w-5\" />\n                  Make a Donation\n                </Button>\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\" \n                  className=\"border-white text-white hover:bg-white hover:text-primary\"\n                  data-testid=\"button-volunteer-cta\"\n                >\n                  Volunteer With Us\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":13769},"client/src/pages/programs/education.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { BookOpen, Users, Award, Target, Heart, ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Layout from \"@/components/Layout\";\nimport { Link } from \"wouter\";\nimport type { Program } from \"@shared/schema\";\n\nexport default function EducationPage() {\n  const { data: programs, isLoading } = useQuery<Program[]>({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const educationPrograms = programs?.filter(program => \n    program.category === 'education' || \n    program.title.toLowerCase().includes('education') ||\n    program.title.toLowerCase().includes('leadership') ||\n    program.title.toLowerCase().includes('digital')\n  ) || [];\n\n  const programCategories = [\n    {\n      title: \"Digital Literacy\",\n      description: \"Empowering women with essential digital skills for the modern world\",\n      icon: BookOpen,\n      programs: educationPrograms.filter(p => p.title.toLowerCase().includes('digital')),\n    },\n    {\n      title: \"Leadership Development\",\n      description: \"Building confident leaders who can drive change in their communities\",\n      icon: Target,\n      programs: educationPrograms.filter(p => p.title.toLowerCase().includes('leadership')),\n    },\n    {\n      title: \"Education Support\",\n      description: \"Providing educational resources and opportunities for academic success\",\n      icon: Award,\n      programs: educationPrograms.filter(p => p.title.toLowerCase().includes('education')),\n    },\n    {\n      title: \"Mentorship Programs\",\n      description: \"Connecting young women with experienced mentors for guidance and support\",\n      icon: Users,\n      programs: educationPrograms.filter(p => p.title.toLowerCase().includes('mentor')),\n    },\n  ];\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-earth-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-serif text-4xl md:text-5xl font-bold text-primary mb-6\">Education & Programs</h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n              Comprehensive educational initiatives designed to empower, educate, and elevate women and girls \n              across Kenya through innovative learning opportunities and skill development programs.\n            </p>\n          </div>\n\n          {/* Key Statistics */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-16\">\n            <div className=\"bg-white rounded-xl p-6 text-center shadow-lg\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">1,250+</div>\n              <div className=\"text-sm text-gray-600\">Women Educated</div>\n            </div>\n            <div className=\"bg-white rounded-xl p-6 text-center shadow-lg\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">89</div>\n              <div className=\"text-sm text-gray-600\">Scholarships Awarded</div>\n            </div>\n            <div className=\"bg-white rounded-xl p-6 text-center shadow-lg\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">15+</div>\n              <div className=\"text-sm text-gray-600\">Active Programs</div>\n            </div>\n            <div className=\"bg-white rounded-xl p-6 text-center shadow-lg\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">24</div>\n              <div className=\"text-sm text-gray-600\">Communities Served</div>\n            </div>\n          </div>\n\n          {/* Program Categories */}\n          <div className=\"mb-16\">\n            <h2 className=\"font-serif text-3xl font-bold text-primary text-center mb-12\">Our Program Areas</h2>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {programCategories.map((category) => (\n                <Card key={category.title} className=\"p-6 hover:shadow-xl transition-shadow duration-300\" data-testid={`card-${category.title.toLowerCase().replace(' ', '-')}`}>\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n                        <category.icon className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-xl text-primary\">{category.title}</CardTitle>\n                        <p className=\"text-gray-600 text-sm\">{category.description}</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-sm text-gray-500 mb-2\">\n                      {category.programs.length} active program{category.programs.length !== 1 ? 's' : ''}\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                      Learn More <ArrowRight className=\"h-4 w-4 ml-2\" />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Featured Programs */}\n          <div className=\"mb-16\">\n            <h2 className=\"font-serif text-3xl font-bold text-primary text-center mb-12\">Featured Programs</h2>\n            \n            {isLoading ? (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"overflow-hidden\">\n                    <Skeleton className=\"h-48 w-full\" />\n                    <div className=\"p-6\">\n                      <Skeleton className=\"h-6 w-32 mb-3\" />\n                      <Skeleton className=\"h-4 w-full mb-2\" />\n                      <Skeleton className=\"h-4 w-3/4 mb-4\" />\n                      <Skeleton className=\"h-8 w-24\" />\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {educationPrograms.slice(0, 6).map((program) => (\n                  <Card key={program.id} className=\"overflow-hidden hover:shadow-xl transition-shadow duration-300\" data-testid={`card-program-${program.id}`}>\n                    {program.imageUrl && (\n                      <div className=\"h-48 overflow-hidden\">\n                        <img \n                          src={program.imageUrl} \n                          alt={program.title}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    )}\n                    <div className=\"p-6\">\n                      <h3 className=\"font-serif text-xl font-bold text-primary mb-3\">{program.title}</h3>\n                      <p className=\"text-gray-600 mb-4 line-clamp-3\">{program.description}</p>\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-learn-more-${program.id}`}>\n                        Learn More <ArrowRight className=\"h-4 w-4 ml-2\" />\n                      </Button>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            )}\n\n            {!isLoading && educationPrograms.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-500 text-lg\">No programs available at the moment. Check back soon!</p>\n              </div>\n            )}\n          </div>\n\n          {/* Scholarship Information */}\n          <div className=\"bg-gradient-to-br from-secondary/10 to-accent/10 rounded-2xl p-8 md:p-12 mb-16\">\n            <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n              <div>\n                <h2 className=\"font-serif text-3xl font-bold text-primary mb-4\">Scholarship Program</h2>\n                <p className=\"text-gray-600 leading-relaxed mb-6\">\n                  Our scholarship program provides financial support to deserving girls and young women \n                  who demonstrate academic excellence and leadership potential but face financial barriers \n                  to their education.\n                </p>\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center\">\n                    <Heart className=\"h-5 w-5 text-accent mr-3\" />\n                    <span className=\"text-gray-700\">89 scholarships awarded to date</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Heart className=\"h-5 w-5 text-accent mr-3\" />\n                    <span className=\"text-gray-700\">Covers tuition, books, and supplies</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Heart className=\"h-5 w-5 text-accent mr-3\" />\n                    <span className=\"text-gray-700\">Mentorship and career guidance included</span>\n                  </div>\n                </div>\n                <Link href=\"/about/scholarships\">\n                  <Button className=\"bg-accent hover:bg-orange-600\" data-testid=\"button-scholarship-info\">\n                    Scholarship Information\n                  </Button>\n                </Link>\n              </div>\n              <div className=\"bg-white rounded-xl p-6 shadow-lg\">\n                <h3 className=\"font-serif text-xl font-bold text-primary mb-4\">Success Story</h3>\n                <blockquote className=\"text-gray-600 italic mb-4\">\n                  \"The VOH-CBO scholarship program changed my life. Not only did it help me complete \n                  my education, but the mentorship I received gave me the confidence to pursue my \n                  dreams in technology.\"\n                </blockquote>\n                <div className=\"flex items-center\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-white font-bold text-sm\">AM</span>\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">Amina M.</p>\n                    <p className=\"text-sm text-gray-500\">Computer Science Graduate</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Call to Action */}\n          <div className=\"bg-gradient-to-r from-primary to-secondary rounded-2xl p-12 text-white text-center\">\n            <h2 className=\"font-serif text-3xl font-bold mb-4\">Get Involved</h2>\n            <p className=\"text-xl opacity-90 mb-8 max-w-2xl mx-auto\">\n              Join us in our mission to empower women and girls through education. \n              Whether through volunteering, donations, or partnerships, your support makes a difference.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/donate\">\n                <Button size=\"lg\" className=\"bg-white text-primary hover:bg-gray-100\" data-testid=\"button-donate-programs\">\n                  <Heart className=\"mr-2 h-5 w-5\" />\n                  Support Our Programs\n                </Button>\n              </Link>\n              <Link href=\"/contact\">\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\" \n                  className=\"border-white text-white hover:bg-white hover:text-primary\"\n                  data-testid=\"button-volunteer-programs\"\n                >\n                  <Users className=\"mr-2 h-5 w-5\" />\n                  Volunteer With Us\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":11932}}}